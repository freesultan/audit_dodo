{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.22;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.22;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/Hashes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\n/// @title INotSupportedMethods\n/// @notice Interface for contracts that with non supported methods.\ninterface INotSupportedMethods {\n    error ZETANotSupported();\n    error CallOnRevertNotSupported();\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/evm/GatewayEVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport { INotSupportedMethods } from \"../../contracts/Errors.sol\";\nimport { RevertContext, RevertOptions, Revertable } from \"../../contracts/Revert.sol\";\nimport { ZetaConnectorBase } from \"./ZetaConnectorBase.sol\";\nimport { IERC20Custody } from \"./interfaces/IERC20Custody.sol\";\nimport { Callable, IGatewayEVM, MessageContext } from \"./interfaces/IGatewayEVM.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title GatewayEVM\n/// @notice The GatewayEVM contract is the endpoint to call smart contracts on external chains.\n/// @dev The contract doesn't hold any funds and should never have active allowances.\ncontract GatewayEVM is\n    Initializable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    IGatewayEVM,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    INotSupportedMethods\n{\n    using SafeERC20 for IERC20;\n\n    /// @notice The address of the custody contract.\n    address public custody;\n    /// @notice The address of the TSS (Threshold Signature Scheme) contract.\n    address public tssAddress;\n    /// @notice The address of the ZetaConnector contract.\n    address public zetaConnector;\n    /// @notice The address of the Zeta token contract.\n    address public zetaToken;\n\n    /// @notice New role identifier for tss role.\n    bytes32 public constant TSS_ROLE = keccak256(\"TSS_ROLE\");\n    /// @notice New role identifier for asset handler role.\n    bytes32 public constant ASSET_HANDLER_ROLE = keccak256(\"ASSET_HANDLER_ROLE\");\n    /// @notice New role identifier for pauser role.\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    /// @notice Max size of payload + revertOptions revert message.\n    uint256 public constant MAX_PAYLOAD_SIZE = 1024;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initialize with tss address. address of zeta token and admin account set as DEFAULT_ADMIN_ROLE.\n    /// @dev Using admin to authorize upgrades and pause, and tss for tss role.\n    function initialize(address tssAddress_, address zetaToken_, address admin_) public initializer {\n        if (tssAddress_ == address(0) || zetaToken_ == address(0)) {\n            revert ZeroAddress();\n        }\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        __Pausable_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\n        _grantRole(PAUSER_ROLE, admin_);\n        _grantRole(PAUSER_ROLE, tssAddress_);\n        tssAddress = tssAddress_;\n        _grantRole(TSS_ROLE, tssAddress_);\n\n        zetaToken = zetaToken_;\n    }\n\n    /// @dev Authorizes the upgrade of the contract, sender must be owner.\n    /// @param newImplementation Address of the new implementation.\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\n\n    /// @notice Update tss address\n    /// @param newTSSAddress new tss address\n    function updateTSSAddress(address newTSSAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newTSSAddress == address(0)) revert ZeroAddress();\n\n        _revokeRole(TSS_ROLE, tssAddress);\n        _grantRole(TSS_ROLE, newTSSAddress);\n\n        emit UpdatedGatewayTSSAddress(tssAddress, newTSSAddress);\n\n        tssAddress = newTSSAddress;\n    }\n\n    /// @notice Pause contract.\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpause contract.\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Transfers msg.value to destination contract and executes it's onRevert function.\n    /// @dev This function can only be called by the TSS address and it is payable.\n    /// @param destination Address to call.\n    /// @param data Calldata to pass to the call.\n    function executeRevert(\n        address destination,\n        bytes calldata data,\n        RevertContext calldata revertContext\n    )\n        public\n        payable\n        nonReentrant\n        onlyRole(TSS_ROLE)\n        whenNotPaused\n    {\n        if (destination == address(0)) revert ZeroAddress();\n        (bool success,) = destination.call{ value: msg.value }(\"\");\n        if (!success) revert ExecutionFailed();\n        Revertable(destination).onRevert(revertContext);\n\n        emit Reverted(destination, address(0), msg.value, data, revertContext);\n    }\n\n    /// @notice Executes a call to a destination address without ERC20 tokens.\n    /// @dev This function can only be called by the TSS address and it is payable.\n    /// @param messageContext Message context containing sender.\n    /// @param destination Address to call.\n    /// @param data Calldata to pass to the call.\n    /// @return The result of the call.\n    function execute(\n        MessageContext calldata messageContext,\n        address destination,\n        bytes calldata data\n    )\n        external\n        payable\n        nonReentrant\n        onlyRole(TSS_ROLE)\n        whenNotPaused\n        returns (bytes memory)\n    {\n        if (destination == address(0)) revert ZeroAddress();\n        bytes memory result;\n        // Execute the call on the target contract\n        // if sender is provided in messageContext call is authenticated and target is Callable.onCall\n        // otherwise, call is arbitrary\n        if (messageContext.sender == address(0)) {\n            result = _executeArbitraryCall(destination, data);\n        } else {\n            result = _executeAuthenticatedCall(messageContext, destination, data);\n        }\n\n        emit Executed(destination, msg.value, data);\n\n        return result;\n    }\n\n    /// @notice Executes a call to a destination contract using ERC20 tokens.\n    /// @dev This function can only be called by the custody or connector address.\n    ///      It uses the ERC20 allowance system, resetting gateway allowance at the end.\n    /// @param messageContext Message context containing sender.\n    /// @param token Address of the ERC20 token.\n    /// @param to Address of the contract to call.\n    /// @param amount Amount of tokens to transfer.\n    /// @param data Calldata to pass to the call.\n    function executeWithERC20(\n        MessageContext calldata messageContext,\n        address token,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    )\n        public\n        nonReentrant\n        onlyRole(ASSET_HANDLER_ROLE)\n        whenNotPaused\n    {\n        if (amount == 0) revert InsufficientERC20Amount();\n        if (to == address(0)) revert ZeroAddress();\n        // Approve the target contract to spend the tokens\n        if (!_resetApproval(token, to)) revert ApprovalFailed();\n        if (!IERC20(token).approve(to, amount)) revert ApprovalFailed();\n        // Execute the call on the target contract\n        // if sender is provided in messageContext call is authenticated and target is Callable.onCall\n        // otherwise, call is arbitrary\n        if (messageContext.sender == address(0)) {\n            _executeArbitraryCall(to, data);\n        } else {\n            _executeAuthenticatedCall(messageContext, to, data);\n        }\n\n        // Reset approval\n        if (!_resetApproval(token, to)) revert ApprovalFailed();\n\n        // Transfer any remaining tokens back to the custody/connector contract\n        uint256 remainingBalance = IERC20(token).balanceOf(address(this));\n        if (remainingBalance > 0) {\n            _transferToAssetHandler(token, remainingBalance);\n        }\n\n        emit ExecutedWithERC20(token, to, amount, data);\n    }\n\n    /// @notice Directly transfers ERC20 tokens and calls onRevert.\n    /// @dev This function can only be called by the custody or connector address.\n    /// @param token Address of the ERC20 token.\n    /// @param to Address of the contract to call.\n    /// @param amount Amount of tokens to transfer.\n    /// @param data Calldata to pass to the call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function revertWithERC20(\n        address token,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        RevertContext calldata revertContext\n    )\n        external\n        nonReentrant\n        onlyRole(ASSET_HANDLER_ROLE)\n        whenNotPaused\n    {\n        if (amount == 0) revert InsufficientERC20Amount();\n        if (to == address(0)) revert ZeroAddress();\n\n        IERC20(token).safeTransfer(address(to), amount);\n        Revertable(to).onRevert(revertContext);\n\n        emit Reverted(to, token, amount, data, revertContext);\n    }\n\n    /// @notice Deposits ETH to the TSS address.\n    /// @param receiver Address of the receiver.\n    /// @param revertOptions Revert options.\n    function deposit(address receiver, RevertOptions calldata revertOptions) external payable whenNotPaused {\n        if (msg.value == 0) revert InsufficientETHAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n        if (revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\n\n        (bool deposited,) = tssAddress.call{ value: msg.value }(\"\");\n\n        if (!deposited) revert DepositFailed();\n\n        emit Deposited(msg.sender, receiver, msg.value, address(0), \"\", revertOptions);\n    }\n\n    /// @notice Deposits ERC20 tokens to the custody or connector contract.\n    /// @param receiver Address of the receiver.\n    /// @param amount Amount of tokens to deposit.\n    /// @param asset Address of the ERC20 token.\n    /// @param revertOptions Revert options.\n    function deposit(\n        address receiver,\n        uint256 amount,\n        address asset,\n        RevertOptions calldata revertOptions\n    )\n        external\n        whenNotPaused\n    {\n        if (amount == 0) revert InsufficientERC20Amount();\n        if (receiver == address(0)) revert ZeroAddress();\n        if (revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\n\n        _transferFromToAssetHandler(msg.sender, asset, amount);\n\n        emit Deposited(msg.sender, receiver, amount, asset, \"\", revertOptions);\n    }\n\n    /// @notice Deposits ETH to the TSS address and calls an omnichain smart contract.\n    /// @param receiver Address of the receiver.\n    /// @param payload Calldata to pass to the call.\n    /// @param revertOptions Revert options.\n    function depositAndCall(\n        address receiver,\n        bytes calldata payload,\n        RevertOptions calldata revertOptions\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        if (msg.value == 0) revert InsufficientETHAmount();\n        if (receiver == address(0)) revert ZeroAddress();\n        if (payload.length + revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\n\n        (bool deposited,) = tssAddress.call{ value: msg.value }(\"\");\n\n        if (!deposited) revert DepositFailed();\n\n        emit DepositedAndCalled(msg.sender, receiver, msg.value, address(0), payload, revertOptions);\n    }\n\n    /// @notice Deposits ERC20 tokens to the custody or connector contract and calls an omnichain smart contract.\n    /// @param receiver Address of the receiver.\n    /// @param amount Amount of tokens to deposit.\n    /// @param asset Address of the ERC20 token.\n    /// @param payload Calldata to pass to the call.\n    /// @param revertOptions Revert options.\n    function depositAndCall(\n        address receiver,\n        uint256 amount,\n        address asset,\n        bytes calldata payload,\n        RevertOptions calldata revertOptions\n    )\n        external\n        whenNotPaused\n    {\n        if (amount == 0) revert InsufficientERC20Amount();\n        if (receiver == address(0)) revert ZeroAddress();\n        if (payload.length + revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\n\n        _transferFromToAssetHandler(msg.sender, asset, amount);\n\n        emit DepositedAndCalled(msg.sender, receiver, amount, asset, payload, revertOptions);\n    }\n\n    /// @notice Calls an omnichain smart contract without asset transfer.\n    /// @param receiver Address of the receiver.\n    /// @param payload Calldata to pass to the call.\n    /// @param revertOptions Revert options.\n    function call(\n        address receiver,\n        bytes calldata payload,\n        RevertOptions calldata revertOptions\n    )\n        external\n        whenNotPaused\n    {\n        if (revertOptions.callOnRevert) revert CallOnRevertNotSupported();\n        if (receiver == address(0)) revert ZeroAddress();\n        if (payload.length + revertOptions.revertMessage.length > MAX_PAYLOAD_SIZE) revert PayloadSizeExceeded();\n\n        emit Called(msg.sender, receiver, payload, revertOptions);\n    }\n\n    /// @notice Sets the custody contract address.\n    /// @param custody_ Address of the custody contract.\n    function setCustody(address custody_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (custody_ == address(0)) revert ZeroAddress();\n        if (custody != address(0)) revert CustodyInitialized();\n\n        _grantRole(ASSET_HANDLER_ROLE, custody_);\n        custody = custody_;\n    }\n\n    /// @notice Sets the connector contract address.\n    /// @param zetaConnector_ Address of the connector contract.\n    function setConnector(address zetaConnector_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (zetaConnector_ == address(0)) revert ZeroAddress();\n        if (zetaConnector != address(0)) revert ConnectorInitialized();\n\n        _grantRole(ASSET_HANDLER_ROLE, zetaConnector_);\n        zetaConnector = zetaConnector_;\n    }\n\n    /// @dev Resets the approval of a token for a specified address.\n    /// This is used to ensure that the approval is set to zero before setting it to a new value.\n    /// @param token Address of the ERC20 token.\n    /// @param to Address to reset the approval for.\n    /// @return True if the approval reset was successful, false otherwise.\n    function _resetApproval(address token, address to) private returns (bool) {\n        return IERC20(token).approve(to, 0);\n    }\n\n    /// @dev Transfers tokens from the sender to the asset handler.\n    /// This function handles the transfer of tokens to either the connector or custody contract based on the asset\n    /// type.\n    /// @param from Address of the sender.\n    /// @param token Address of the ERC20 token.\n    /// @param amount Amount of tokens to transfer.\n    function _transferFromToAssetHandler(address from, address token, uint256 amount) private {\n        if (token == zetaToken) {\n            // TODO: remove error and comment out code once ZETA supported back\n            // https://github.com/zeta-chain/protocol-contracts/issues/394\n            // ZETA token is currently not supported for deposit\n            revert ZETANotSupported();\n\n            // // transfer to connector\n            // // transfer amount to gateway\n            // IERC20(token).safeTransferFrom(from, address(this), amount);\n            // // approve connector to handle tokens depending on connector version (eg. lock or burn)\n            // if (!IERC20(token).approve(zetaConnector, amount)) revert ApprovalFailed();\n            // // send tokens to connector\n            // ZetaConnectorBase(zetaConnector).receiveTokens(amount);\n        } else {\n            // transfer to custody\n            if (!IERC20Custody(custody).whitelisted(token)) revert NotWhitelistedInCustody();\n            IERC20(token).safeTransferFrom(from, custody, amount);\n        }\n    }\n\n    /// @dev Transfers tokens to the asset handler.\n    /// This function handles the transfer of tokens to either the connector or custody contract based on the asset\n    /// type.\n    /// @param token Address of the ERC20 token.\n    /// @param amount Amount of tokens to transfer.\n    function _transferToAssetHandler(address token, uint256 amount) private {\n        if (token == zetaToken) {\n            // transfer to connector\n            // approve connector to handle tokens depending on connector version (eg. lock or burn)\n            if (!IERC20(token).approve(zetaConnector, amount)) revert ApprovalFailed();\n            // send tokens to connector\n            ZetaConnectorBase(zetaConnector).receiveTokens(amount);\n        } else {\n            // transfer to custody\n            if (!IERC20Custody(custody).whitelisted(token)) revert NotWhitelistedInCustody();\n            IERC20(token).safeTransfer(custody, amount);\n        }\n    }\n\n    /// @dev Private function to execute an arbitrary call to a destination address.\n    /// @param destination Address to call.\n    /// @param data Calldata to pass to the call.\n    /// @return The result of the call.\n    function _executeArbitraryCall(address destination, bytes calldata data) private returns (bytes memory) {\n        _revertIfOnCallOrOnRevert(data);\n        (bool success, bytes memory result) = destination.call{ value: msg.value }(data);\n        if (!success) revert ExecutionFailed();\n\n        return result;\n    }\n\n    /// @dev Private function to execute an authenticated call to a destination address.\n    /// @param messageContext Message context containing sender and arbitrary call flag.\n    /// @param destination Address to call.\n    /// @param data Calldata to pass to the call.\n    /// @return The result of the call.\n    function _executeAuthenticatedCall(\n        MessageContext calldata messageContext,\n        address destination,\n        bytes calldata data\n    )\n        private\n        returns (bytes memory)\n    {\n        return Callable(destination).onCall{ value: msg.value }(messageContext, data);\n    }\n\n    // @dev prevent spoofing onCall and onRevert functions\n    function _revertIfOnCallOrOnRevert(bytes calldata data) private pure {\n        if (data.length >= 4) {\n            bytes4 functionSelector;\n            assembly {\n                functionSelector := calldataload(data.offset)\n            }\n\n            if (functionSelector == Callable.onCall.selector) {\n                revert NotAllowedToCallOnCall();\n            }\n\n            if (functionSelector == Revertable.onRevert.selector) {\n                revert NotAllowedToCallOnRevert();\n            }\n        }\n    }\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/evm/interfaces/IERC20Custody.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport { RevertContext } from \"../../../contracts/Revert.sol\";\n\nimport { MessageContext } from \"./IGatewayEVM.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title IERC20CustodyEvents\n/// @notice Interface for the events emitted by the ERC20 custody contract.\ninterface IERC20CustodyEvents {\n    /// @notice Emitted when tokens are withdrawn.\n    /// @param token The address of the ERC20 token.\n    /// @param to The address receiving the tokens.\n    /// @param amount The amount of tokens withdrawn.\n    event Withdrawn(address indexed to, address indexed token, uint256 amount);\n\n    /// @notice Emitted when tokens are withdrawn and a contract call is made.\n    /// @param to The address receiving the tokens.\n    /// @param token The address of the ERC20 token.\n    /// @param amount The amount of tokens withdrawn.\n    /// @param data The calldata passed to the contract call.\n    event WithdrawnAndCalled(address indexed to, address indexed token, uint256 amount, bytes data);\n\n    /// @notice Emitted when tokens are withdrawn and a revertable contract call is made.\n    /// @param to The address receiving the tokens.\n    /// @param token The address of the ERC20 token.\n    /// @param amount The amount of tokens withdrawn.\n    /// @param data The calldata passed to the contract call.\n    /// @param revertContext Revert context to pass to onRevert.\n    event WithdrawnAndReverted(\n        address indexed to, address indexed token, uint256 amount, bytes data, RevertContext revertContext\n    );\n\n    /// @notice Emitted when ERC20 token is whitelisted\n    /// @param token address of ERC20 token.\n    event Whitelisted(address indexed token);\n\n    /// @notice Emitted when ERC20 token is unwhitelisted\n    /// @param token address of ERC20 token.\n    event Unwhitelisted(address indexed token);\n\n    /// @notice Emitted in legacy deposit method.\n    event Deposited(bytes recipient, IERC20 indexed asset, uint256 amount, bytes message);\n\n    /// @notice Emitted when tss address is updated\n    /// @param oldTSSAddress old tss address\n    /// @param newTSSAddress new tss address\n    event UpdatedCustodyTSSAddress(address oldTSSAddress, address newTSSAddress);\n}\n\n/// @title IERC20CustodyErrors\n/// @notice Interface for the errors used in the ERC20 custody contract.\ninterface IERC20CustodyErrors {\n    /// @notice Error for zero address input.\n    error ZeroAddress();\n    /// @notice Error for not whitelisted ERC20 token\n    error NotWhitelisted();\n    /// @notice Error for calling not supported legacy methods.\n    error LegacyMethodsNotSupported();\n}\n\ninterface IERC20Custody is IERC20CustodyEvents, IERC20CustodyErrors {\n    /// @notice Mapping of whitelisted tokens => true/false.\n    function whitelisted(address token) external view returns (bool);\n\n    /// @notice Withdraw directly transfers the tokens to the destination address without contract call.\n    /// @dev This function can only be called by the TSS address.\n    /// @param token Address of the ERC20 token.\n    /// @param to Destination address for the tokens.\n    /// @param amount Amount of tokens to withdraw.\n    function withdraw(address token, address to, uint256 amount) external;\n\n    /// @notice WithdrawAndCall transfers tokens to Gateway and call a contract through the Gateway.\n    /// @dev This function can only be called by the TSS address.\n    /// @param messageContext Message context containing sender.\n    /// @param token Address of the ERC20 token.\n    /// @param to Address of the contract to call.\n    /// @param amount Amount of tokens to withdraw.\n    /// @param data Calldata to pass to the contract call.\n    function withdrawAndCall(\n        MessageContext calldata messageContext,\n        address token,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    )\n        external;\n\n    /// @notice WithdrawAndRevert transfers tokens to Gateway and call a contract with a revert functionality through\n    /// the Gateway.\n    /// @dev This function can only be called by the TSS address.\n    /// @param token Address of the ERC20 token.\n    /// @param to Address of the contract to call.\n    /// @param amount Amount of tokens to withdraw.\n    /// @param data Calldata to pass to the contract call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function withdrawAndRevert(\n        address token,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        RevertContext calldata revertContext\n    )\n        external;\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/evm/interfaces/IGatewayEVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport \"../../../contracts/Revert.sol\";\n\n/// @title IGatewayEVMEvents\n/// @notice Interface for the events emitted by the GatewayEVM contract.\ninterface IGatewayEVMEvents {\n    /// @notice Emitted when a contract call is executed.\n    /// @param destination The address of the contract called.\n    /// @param value The amount of ETH sent with the call.\n    /// @param data The calldata passed to the contract call.\n    event Executed(address indexed destination, uint256 value, bytes data);\n\n    /// @notice Emitted when a contract call is reverted.\n    /// @param to The address of the contract called.\n    /// @param token The address of the ERC20 token, empty if gas token\n    /// @param amount The amount of ETH sent with the call.\n    /// @param data The calldata passed to the contract call.\n    /// @param revertContext Revert context to pass to onRevert.\n    event Reverted(address indexed to, address indexed token, uint256 amount, bytes data, RevertContext revertContext);\n\n    /// @notice Emitted when a contract call with ERC20 tokens is executed.\n    /// @param token The address of the ERC20 token.\n    /// @param to The address of the contract called.\n    /// @param amount The amount of tokens transferred.\n    /// @param data The calldata passed to the contract call.\n    event ExecutedWithERC20(address indexed token, address indexed to, uint256 amount, bytes data);\n\n    /// @notice Emitted when a deposit is made.\n    /// @param sender The address of the sender.\n    /// @param receiver The address of the receiver.\n    /// @param amount The amount of ETH or tokens deposited.\n    /// @param asset The address of the ERC20 token (zero address if ETH).\n    /// @param payload The calldata passed with the deposit. No longer used. Kept to maintain compatibility.\n    /// @param revertOptions Revert options.\n    event Deposited(\n        address indexed sender,\n        address indexed receiver,\n        uint256 amount,\n        address asset,\n        bytes payload,\n        RevertOptions revertOptions\n    );\n\n    /// @notice Emitted when a deposit and call is made.\n    /// @param sender The address of the sender.\n    /// @param receiver The address of the receiver.\n    /// @param amount The amount of ETH or tokens deposited.\n    /// @param asset The address of the ERC20 token (zero address if ETH).\n    /// @param payload The calldata passed with the deposit.\n    /// @param revertOptions Revert options.\n    event DepositedAndCalled(\n        address indexed sender,\n        address indexed receiver,\n        uint256 amount,\n        address asset,\n        bytes payload,\n        RevertOptions revertOptions\n    );\n\n    /// @notice Emitted when an omnichain smart contract call is made without asset transfer.\n    /// @param sender The address of the sender.\n    /// @param receiver The address of the receiver.\n    /// @param payload The calldata passed to the call.\n    /// @param revertOptions Revert options.\n    event Called(address indexed sender, address indexed receiver, bytes payload, RevertOptions revertOptions);\n\n    /// @notice Emitted when tss address is updated\n    /// @param oldTSSAddress old tss address\n    /// @param newTSSAddress new tss address\n    event UpdatedGatewayTSSAddress(address oldTSSAddress, address newTSSAddress);\n}\n\n/// @title IGatewayEVMErrors\n/// @notice Interface for the errors used in the GatewayEVM contract.\ninterface IGatewayEVMErrors {\n    /// @notice Error for failed execution.\n    error ExecutionFailed();\n\n    /// @notice Error for failed deposit.\n    error DepositFailed();\n\n    /// @notice Error for insufficient ETH amount.\n    error InsufficientETHAmount();\n\n    /// @notice Error for insufficient ERC20 token amount.\n    error InsufficientERC20Amount();\n\n    /// @notice Error for zero address input.\n    error ZeroAddress();\n\n    /// @notice Error for failed token approval.\n    error ApprovalFailed();\n\n    /// @notice Error for already initialized custody.\n    error CustodyInitialized();\n\n    /// @notice Error for already initialized connector.\n    error ConnectorInitialized();\n\n    /// @notice Error when trying to transfer not whitelisted token to custody.\n    error NotWhitelistedInCustody();\n\n    /// @notice Error when trying to call onCall method using arbitrary call.\n    error NotAllowedToCallOnCall();\n\n    /// @notice Error when trying to call onRevert method using arbitrary call.\n    error NotAllowedToCallOnRevert();\n\n    /// @notice Error indicating payload size exceeded in external functions.\n    error PayloadSizeExceeded();\n}\n\n/// @title IGatewayEVM\n/// @notice Interface for the GatewayEVM contract.\ninterface IGatewayEVM is IGatewayEVMErrors, IGatewayEVMEvents {\n    /// @notice Executes a call to a contract using ERC20 tokens.\n    /// @param messageContext Message context containing sender and arbitrary call flag.\n    /// @param token The address of the ERC20 token.\n    /// @param to The address of the contract to call.\n    /// @param amount The amount of tokens to transfer.\n    /// @param data The calldata to pass to the contract call.\n    function executeWithERC20(\n        MessageContext calldata messageContext,\n        address token,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    )\n        external;\n\n    /// @notice Transfers msg.value to destination contract and executes it's onRevert function.\n    /// @dev This function can only be called by the TSS address and it is payable.\n    /// @param destination Address to call.\n    /// @param data Calldata to pass to the call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function executeRevert(\n        address destination,\n        bytes calldata data,\n        RevertContext calldata revertContext\n    )\n        external\n        payable;\n\n    /// @notice Executes a call to a destination address without ERC20 tokens.\n    /// @dev This function can only be called by the TSS address and it is payable.\n    /// @param messageContext Message context containing sender and arbitrary call flag.\n    /// @param destination Address to call.\n    /// @param data Calldata to pass to the call.\n    /// @return The result of the call.\n    function execute(\n        MessageContext calldata messageContext,\n        address destination,\n        bytes calldata data\n    )\n        external\n        payable\n        returns (bytes memory);\n\n    /// @notice Executes a revertable call to a contract using ERC20 tokens.\n    /// @param token The address of the ERC20 token.\n    /// @param to The address of the contract to call.\n    /// @param amount The amount of tokens to transfer.\n    /// @param data The calldata to pass to the contract call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function revertWithERC20(\n        address token,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        RevertContext calldata revertContext\n    )\n        external;\n\n    /// @notice Deposits ETH to the TSS address.\n    /// @param receiver Address of the receiver.\n    /// @param revertOptions Revert options.\n    function deposit(address receiver, RevertOptions calldata revertOptions) external payable;\n\n    /// @notice Deposits ERC20 tokens to the custody or connector contract.\n    /// @param receiver Address of the receiver.\n    /// @param amount Amount of tokens to deposit.\n    /// @param asset Address of the ERC20 token.\n    /// @param revertOptions Revert options.\n    function deposit(address receiver, uint256 amount, address asset, RevertOptions calldata revertOptions) external;\n\n    /// @notice Deposits ETH to the TSS address and calls an omnichain smart contract.\n    /// @param receiver Address of the receiver.\n    /// @param payload Calldata to pass to the call.\n    /// @param revertOptions Revert options.\n    function depositAndCall(\n        address receiver,\n        bytes calldata payload,\n        RevertOptions calldata revertOptions\n    )\n        external\n        payable;\n\n    /// @notice Deposits ERC20 tokens to the custody or connector contract and calls an omnichain smart contract.\n    /// @param receiver Address of the receiver.\n    /// @param amount Amount of tokens to deposit.\n    /// @param asset Address of the ERC20 token.\n    /// @param payload Calldata to pass to the call.\n    /// @param revertOptions Revert options.\n    function depositAndCall(\n        address receiver,\n        uint256 amount,\n        address asset,\n        bytes calldata payload,\n        RevertOptions calldata revertOptions\n    )\n        external;\n\n    /// @notice Calls an omnichain smart contract without asset transfer.\n    /// @param receiver Address of the receiver.\n    /// @param payload Calldata to pass to the call.\n    /// @param revertOptions Revert options.\n    function call(address receiver, bytes calldata payload, RevertOptions calldata revertOptions) external;\n}\n\n/// @notice Message context passed to execute function.\n/// @param sender Sender from omnichain contract.\nstruct MessageContext {\n    address sender;\n}\n\n/// @notice Interface implemented by contracts receiving authenticated calls.\ninterface Callable {\n    function onCall(MessageContext calldata context, bytes calldata message) external payable returns (bytes memory);\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/evm/interfaces/IZetaConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport { RevertContext } from \"../../../contracts/Revert.sol\";\n\n/// @title IZetaConnectorEvents\n/// @notice Interface for the events emitted by the ZetaConnector contracts.\ninterface IZetaConnectorEvents {\n    /// @notice Emitted when tokens are withdrawn.\n    /// @param to The address to which the tokens are withdrawn.\n    /// @param amount The amount of tokens withdrawn.\n    event Withdrawn(address indexed to, uint256 amount);\n\n    /// @notice Emitted when tokens are withdrawn and a contract is called.\n    /// @param to The address to which the tokens are withdrawn.\n    /// @param amount The amount of tokens withdrawn.\n    /// @param data The calldata passed to the contract call.\n    event WithdrawnAndCalled(address indexed to, uint256 amount, bytes data);\n\n    /// @notice Emitted when tokens are withdrawn and a contract is called with a revert callback.\n    /// @param to The address to which the tokens are withdrawn.\n    /// @param amount The amount of tokens withdrawn.\n    /// @param data The calldata passed to the contract call.\n    /// @param revertContext Revert context to pass to onRevert.\n    event WithdrawnAndReverted(address indexed to, uint256 amount, bytes data, RevertContext revertContext);\n\n    /// @notice Emitted when tss address is updated\n    /// @param oldTSSAddress old tss address\n    /// @param newTSSAddress new tss address\n    event UpdatedZetaConnectorTSSAddress(address oldTSSAddress, address newTSSAddress);\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/evm/ZetaConnectorBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { RevertContext } from \"../../contracts/Revert.sol\";\nimport {\n    IGatewayEVM,\n    IGatewayEVMErrors,\n    IGatewayEVMEvents,\n    MessageContext\n} from \"../../contracts/evm/interfaces/IGatewayEVM.sol\";\nimport \"../../contracts/evm/interfaces/IZetaConnector.sol\";\n\n/// @title ZetaConnectorBase\n/// @notice Abstract base contract for ZetaConnector.\n/// @dev This contract implements basic functionality for handling tokens and interacting with the Gateway contract.\nabstract contract ZetaConnectorBase is\n    Initializable,\n    UUPSUpgradeable,\n    IZetaConnectorEvents,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    /// @notice Error indicating that a zero address was provided.\n    error ZeroAddress();\n\n    /// @notice The Gateway contract used for executing cross-chain calls.\n    IGatewayEVM public gateway;\n    /// @notice The address of the Zeta token.\n    address public zetaToken;\n    /// @notice The address of the TSS (Threshold Signature Scheme) contract.\n    address public tssAddress;\n\n    /// @notice New role identifier for withdrawer role.\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\"WITHDRAWER_ROLE\");\n    /// @notice New role identifier for pauser role.\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    /// @notice New role identifier for tss role.\n    bytes32 public constant TSS_ROLE = keccak256(\"TSS_ROLE\");\n\n    /// @notice Initializer for ZetaConnectors.\n    /// @dev Set admin as default admin and pauser, and tssAddress as tss role.\n    function initialize(\n        address gateway_,\n        address zetaToken_,\n        address tssAddress_,\n        address admin_\n    )\n        public\n        virtual\n        initializer\n    {\n        if (gateway_ == address(0) || zetaToken_ == address(0) || tssAddress_ == address(0) || admin_ == address(0)) {\n            revert ZeroAddress();\n        }\n\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n        __AccessControl_init();\n        __Pausable_init();\n\n        gateway = IGatewayEVM(gateway_);\n        zetaToken = zetaToken_;\n        tssAddress = tssAddress_;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\n        _grantRole(WITHDRAWER_ROLE, tssAddress_);\n        _grantRole(TSS_ROLE, tssAddress_);\n        _grantRole(PAUSER_ROLE, admin_);\n        _grantRole(PAUSER_ROLE, tssAddress_);\n    }\n\n    /// @dev Authorizes the upgrade of the contract, sender must be owner.\n    /// @param newImplementation Address of the new implementation.\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\n\n    /// @notice Update tss address\n    /// @param newTSSAddress new tss address\n    function updateTSSAddress(address newTSSAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newTSSAddress == address(0)) revert ZeroAddress();\n\n        _revokeRole(WITHDRAWER_ROLE, tssAddress);\n        _revokeRole(TSS_ROLE, tssAddress);\n\n        _grantRole(WITHDRAWER_ROLE, newTSSAddress);\n        _grantRole(TSS_ROLE, newTSSAddress);\n\n        emit UpdatedZetaConnectorTSSAddress(tssAddress, newTSSAddress);\n\n        tssAddress = newTSSAddress;\n    }\n\n    /// @notice Pause contract.\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpause contract.\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Withdraw tokens to a specified address.\n    /// @param to The address to withdraw tokens to.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param internalSendHash A hash used for internal tracking of the transaction.\n    function withdraw(address to, uint256 amount, bytes32 internalSendHash) external virtual;\n\n    /// @notice Withdraw tokens and call a contract through Gateway.\n    /// @param messageContext Message context containing sender.\n    /// @param to The address to withdraw tokens to.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param data The calldata to pass to the contract call.\n    /// @param internalSendHash A hash used for internal tracking of the transaction.\n    function withdrawAndCall(\n        MessageContext calldata messageContext,\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes32 internalSendHash\n    )\n        external\n        virtual;\n\n    /// @notice Withdraw tokens and call a contract with a revert callback through Gateway.\n    /// @param to The address to withdraw tokens to.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param data The calldata to pass to the contract call.\n    /// @param internalSendHash A hash used for internal tracking of the transaction.\n    /// @param revertContext Revert context to pass to onRevert.\n    function withdrawAndRevert(\n        address to,\n        uint256 amount,\n        bytes calldata data,\n        bytes32 internalSendHash,\n        RevertContext calldata revertContext\n    )\n        external\n        virtual;\n\n    /// @notice Handle received tokens.\n    /// @param amount The amount of tokens received.\n    function receiveTokens(uint256 amount) external virtual;\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/Revert.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\n/// @notice Struct containing revert options\n/// @param revertAddress Address to receive revert.\n/// @param callOnRevert Flag if onRevert hook should be called.\n/// @param abortAddress Address to receive funds if aborted.\n/// @param revertMessage Arbitrary data sent back in onRevert.\n/// @param onRevertGasLimit Gas limit for revert tx, unused on GatewayZEVM methods\nstruct RevertOptions {\n    address revertAddress;\n    bool callOnRevert;\n    address abortAddress;\n    bytes revertMessage;\n    uint256 onRevertGasLimit;\n}\n\n/// @notice Struct containing revert context passed to onRevert.\n/// @param sender Address of account that initiated smart contract call.\n/// @param asset Address of asset. On a connected chain, it contains the fungible\n/// token address or is empty if it's a gas token. On ZetaChain, it contains the\n/// address of the ZRC20.\n/// @param amount Amount specified with the transaction.\n/// @param revertMessage Arbitrary data sent back in onRevert.\nstruct RevertContext {\n    address sender;\n    address asset;\n    uint256 amount;\n    bytes revertMessage;\n}\n\n/// @notice Struct containing abort context passed to onAbort.\n/// @param sender Address of account that initiated smart contract call.\n/// bytes is used as the crosschain transaction can be initiated from a non-EVM chain.\n/// @param asset Address of asset. On a connected chain, it contains the fungible\n/// token address or is empty if it's a gas token. On ZetaChain, it contains the\n/// address of the ZRC20.\n/// @param amount Amount specified with the transaction.\n/// @param outgoing Flag to indicate if the crosschain transaction was outgoing: from ZetaChain to connected chain.\n/// if false, the transaction was incoming: from connected chain to ZetaChain.\n/// @param chainID Chain ID of the connected chain.\n/// @param revertMessage Arbitrary data specified in the RevertOptions object when initating the crosschain transaction.\nstruct AbortContext {\n    bytes sender;\n    address asset;\n    uint256 amount;\n    bool outgoing;\n    uint256 chainID;\n    bytes revertMessage;\n}\n\n/// @title Revertable\n/// @notice Interface for contracts that support revertable calls.\ninterface Revertable {\n    /// @notice Called when a revertable call is made.\n    /// @param revertContext Revert context to pass to onRevert.\n    function onRevert(RevertContext calldata revertContext) external;\n}\n\n/// @title Abortable\n/// @notice Interface for contracts that support abortable calls.\ninterface Abortable {\n    /// @notice Called when a revertable call is aborted.\n    /// @param abortContext Abort context to pass to onAbort.\n    function onAbort(AbortContext calldata abortContext) external;\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport { CallOptions, IGatewayZEVM } from \"./interfaces/IGatewayZEVM.sol\";\n\nimport { INotSupportedMethods } from \"../../contracts/Errors.sol\";\nimport { AbortContext, Abortable, RevertContext, RevertOptions, Revertable } from \"../../contracts/Revert.sol\";\nimport \"./interfaces/IWZETA.sol\";\nimport { IZRC20 } from \"./interfaces/IZRC20.sol\";\nimport { MessageContext, UniversalContract } from \"./interfaces/UniversalContract.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\n\n/// @title GatewayZEVM\n/// @notice The GatewayZEVM contract is the endpoint to call smart contracts on omnichain.\n/// @dev The contract doesn't hold any funds and should never have active allowances.\ncontract GatewayZEVM is\n    IGatewayZEVM,\n    Initializable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    INotSupportedMethods\n{\n    /// @notice Error indicating a zero address was provided.\n    error ZeroAddress();\n\n    /// @notice The constant address of the protocol\n    address public constant PROTOCOL_ADDRESS = 0x735b14BB79463307AAcBED86DAf3322B1e6226aB;\n    /// @notice The address of the Zeta token.\n    address public zetaToken;\n\n    /// @notice New role identifier for pauser role.\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /// @notice Max size of message + revertOptions revert message.\n    uint256 public constant MAX_MESSAGE_SIZE = 1024;\n\n    /// @dev Only protocol address allowed modifier.\n    modifier onlyProtocol() {\n        if (msg.sender != PROTOCOL_ADDRESS) {\n            revert CallerIsNotProtocol();\n        }\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initialize with address of zeta token and admin account set as DEFAULT_ADMIN_ROLE.\n    /// @dev Using admin to authorize upgrades and pause.\n    function initialize(address zetaToken_, address admin_) public initializer {\n        if (zetaToken_ == address(0) || admin_ == address(0)) {\n            revert ZeroAddress();\n        }\n        __UUPSUpgradeable_init();\n        __AccessControl_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\n        _grantRole(PAUSER_ROLE, admin_);\n        zetaToken = zetaToken_;\n    }\n\n    /// @dev Authorizes the upgrade of the contract.\n    /// @param newImplementation The address of the new implementation.\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) { }\n\n    /// @dev Receive function to receive ZETA from WETH9.withdraw().\n    receive() external payable whenNotPaused {\n        if (msg.sender != zetaToken && msg.sender != PROTOCOL_ADDRESS) revert OnlyWZETAOrProtocol();\n    }\n\n    /// @notice Pause contract.\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Unpause contract.\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @dev Private function to withdraw ZRC20 tokens.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @return The gas fee for the withdrawal.\n    function _withdrawZRC20(uint256 amount, address zrc20) private returns (uint256) {\n        // Use gas limit from zrc20\n        return _withdrawZRC20WithGasLimit(amount, zrc20, IZRC20(zrc20).GAS_LIMIT());\n    }\n\n    /// @dev Private function to withdraw ZRC20 tokens with gas limit.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param gasLimit Gas limit.\n    /// @return The gas fee for the withdrawal.\n    function _withdrawZRC20WithGasLimit(uint256 amount, address zrc20, uint256 gasLimit) private returns (uint256) {\n        (address gasZRC20, uint256 gasFee) = IZRC20(zrc20).withdrawGasFeeWithGasLimit(gasLimit);\n        if (!IZRC20(gasZRC20).transferFrom(msg.sender, PROTOCOL_ADDRESS, gasFee)) {\n            revert GasFeeTransferFailed();\n        }\n\n        if (!IZRC20(zrc20).transferFrom(msg.sender, address(this), amount)) {\n            revert ZRC20TransferFailed();\n        }\n\n        if (!IZRC20(zrc20).burn(amount)) revert ZRC20BurnFailed();\n\n        return gasFee;\n    }\n\n    /// @dev Private function to transfer ZETA tokens.\n    /// @param amount The amount of tokens to transfer.\n    /// @param to The address to transfer the tokens to.\n    function _transferZETA(uint256 amount, address to) private {\n        if (!IWETH9(zetaToken).transferFrom(msg.sender, address(this), amount)) revert FailedZetaSent();\n        IWETH9(zetaToken).withdraw(amount);\n        (bool sent,) = to.call{ value: amount }(\"\");\n        if (!sent) revert FailedZetaSent();\n    }\n\n    /// @notice Withdraw ZRC20 tokens to an external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param revertOptions Revert options.\n    function withdraw(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        RevertOptions calldata revertOptions\n    )\n        external\n        whenNotPaused\n    {\n        if (receiver.length == 0) revert ZeroAddress();\n        if (amount == 0) revert InsufficientZRC20Amount();\n        if (revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\n\n        uint256 gasFee = _withdrawZRC20(amount, zrc20);\n        emit Withdrawn(\n            msg.sender,\n            0,\n            receiver,\n            zrc20,\n            amount,\n            gasFee,\n            IZRC20(zrc20).PROTOCOL_FLAT_FEE(),\n            \"\",\n            CallOptions({ gasLimit: IZRC20(zrc20).GAS_LIMIT(), isArbitraryCall: true }),\n            revertOptions\n        );\n    }\n\n    /// @notice Withdraw ZRC20 tokens and call a smart contract on an external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param message The calldata to pass to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        bytes calldata message,\n        CallOptions calldata callOptions,\n        RevertOptions calldata revertOptions\n    )\n        external\n        whenNotPaused\n    {\n        if (receiver.length == 0) revert ZeroAddress();\n        if (amount == 0) revert InsufficientZRC20Amount();\n        if (callOptions.gasLimit == 0) revert InsufficientGasLimit();\n        if (message.length + revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\n\n        uint256 gasFee = _withdrawZRC20WithGasLimit(amount, zrc20, callOptions.gasLimit);\n        emit WithdrawnAndCalled(\n            msg.sender,\n            0,\n            receiver,\n            zrc20,\n            amount,\n            gasFee,\n            IZRC20(zrc20).PROTOCOL_FLAT_FEE(),\n            message,\n            callOptions,\n            revertOptions\n        );\n    }\n\n    /// @notice Withdraw ZETA tokens to an external chain.\n    //// @param receiver The receiver address on the external chain.\n    //// @param amount The amount of tokens to withdraw.\n    //// @param revertOptions Revert options.\n    function withdraw(\n        bytes memory, /*receiver*/\n        uint256, /*amount*/\n        uint256, /*chainId*/\n        RevertOptions calldata /*revertOptions*/\n    )\n        external\n        view\n        whenNotPaused\n    {\n        // TODO: remove error and comment out code once ZETA supported back\n        // https://github.com/zeta-chain/protocol-contracts/issues/394\n        // ZETA is not currently supported for withdraws\n        revert ZETANotSupported();\n\n        // if (receiver.length == 0) revert ZeroAddress();\n        // if (amount == 0) revert InsufficientZetaAmount();\n        // if (revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\n\n        // _transferZETA(amount, PROTOCOL_ADDRESS);\n        // emit Withdrawn(\n        //     msg.sender,\n        //     chainId,\n        //     receiver,\n        //     address(zetaToken),\n        //     amount,\n        //     0,\n        //     0,\n        //     \"\",\n        //     CallOptions({ gasLimit: 0, isArbitraryCall: true }),\n        //     revertOptions\n        // );\n    }\n\n    /// @notice Withdraw ZETA tokens and call a smart contract on an external chain.\n    //// @param receiver The receiver address on the external chain.\n    //// @param amount The amount of tokens to withdraw.\n    //// @param chainId Chain id of the external chain.\n    //// @param message The calldata to pass to the contract call.\n    //// @param callOptions Call options including gas limit and arbirtrary call flag.\n    //// @param revertOptions Revert options.\n    function withdrawAndCall(\n        bytes memory, /*receiver*/\n        uint256, /*amount*/\n        uint256, /*chainId*/\n        bytes calldata, /*message*/\n        CallOptions calldata, /*callOptions*/\n        RevertOptions calldata /*revertOptions*/\n    )\n        external\n        view\n        whenNotPaused\n    {\n        // TODO: remove error and comment out code once ZETA supported back\n        // https://github.com/zeta-chain/protocol-contracts/issues/394\n        // ZETA is not currently supported for withdraws\n        revert ZETANotSupported();\n\n        // if (receiver.length == 0) revert ZeroAddress();\n        // if (amount == 0) revert InsufficientZetaAmount();\n        // if (callOptions.gasLimit == 0) revert InsufficientGasLimit();\n        // if (message.length + revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\n\n        // _transferZETA(amount, PROTOCOL_ADDRESS);\n        // emit WithdrawnAndCalled(\n        //     msg.sender, chainId, receiver, address(zetaToken), amount, 0, 0, message, callOptions, revertOptions\n        // );\n    }\n\n    /// @notice Call a smart contract on an external chain without asset transfer.\n    /// @param receiver The receiver address on the external chain.\n    /// @param zrc20 Address of zrc20 to pay fees.\n    /// @param message The calldata to pass to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    function call(\n        bytes memory receiver,\n        address zrc20,\n        bytes calldata message,\n        CallOptions calldata callOptions,\n        RevertOptions calldata revertOptions\n    )\n        external\n        whenNotPaused\n    {\n        if (callOptions.gasLimit == 0) revert InsufficientGasLimit();\n        if (message.length + revertOptions.revertMessage.length > MAX_MESSAGE_SIZE) revert MessageSizeExceeded();\n\n        _call(receiver, zrc20, message, callOptions, revertOptions);\n    }\n\n    function _call(\n        bytes memory receiver,\n        address zrc20,\n        bytes calldata message,\n        CallOptions memory callOptions,\n        RevertOptions memory revertOptions\n    )\n        private\n    {\n        if (receiver.length == 0) revert ZeroAddress();\n\n        (address gasZRC20, uint256 gasFee) = IZRC20(zrc20).withdrawGasFeeWithGasLimit(callOptions.gasLimit);\n        if (!IZRC20(gasZRC20).transferFrom(msg.sender, PROTOCOL_ADDRESS, gasFee)) {\n            revert GasFeeTransferFailed();\n        }\n\n        emit Called(msg.sender, zrc20, receiver, message, callOptions, revertOptions);\n    }\n\n    /// @notice Deposit foreign coins into ZRC20.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to deposit.\n    /// @param target The target address to receive the deposited tokens.\n    function deposit(address zrc20, uint256 amount, address target) external onlyProtocol whenNotPaused {\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\n        if (amount == 0) revert InsufficientZRC20Amount();\n\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\n\n        if (!IZRC20(zrc20).deposit(target, amount)) revert ZRC20DepositFailed();\n    }\n\n    /// @notice Execute a user-specified contract on ZEVM.\n    /// @param context The context of the cross-chain call.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to transfer.\n    /// @param target The target contract to call.\n    /// @param message The calldata to pass to the contract call.\n    function execute(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    )\n        external\n        nonReentrant\n        onlyProtocol\n        whenNotPaused\n    {\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\n\n        UniversalContract(target).onCall(context, zrc20, amount, message);\n    }\n\n    /// @notice Deposit foreign coins into ZRC20 and call a user-specified contract on ZEVM.\n    /// @param context The context of the cross-chain call.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to transfer.\n    /// @param target The target contract to call.\n    /// @param message The calldata to pass to the contract call.\n    function depositAndCall(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    )\n        external\n        nonReentrant\n        onlyProtocol\n        whenNotPaused\n    {\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\n        if (amount == 0) revert InsufficientZRC20Amount();\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\n\n        if (!IZRC20(zrc20).deposit(target, amount)) revert ZRC20DepositFailed();\n        UniversalContract(target).onCall(context, zrc20, amount, message);\n    }\n\n    /// @notice Deposit ZETA and call a user-specified contract on ZEVM.\n    /// @param context The context of the cross-chain call.\n    /// @param amount The amount of tokens to transfer.\n    /// @param target The target contract to call.\n    /// @param message The calldata to pass to the contract call.\n    function depositAndCall(\n        MessageContext calldata context,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    )\n        external\n        nonReentrant\n        onlyProtocol\n        whenNotPaused\n    {\n        if (target == address(0)) revert ZeroAddress();\n        if (amount == 0) revert InsufficientZetaAmount();\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\n\n        _transferZETA(amount, target);\n        UniversalContract(target).onCall(context, zetaToken, amount, message);\n    }\n\n    /// @notice Revert a user-specified contract on ZEVM.\n    /// @param target The target contract to call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function executeRevert(\n        address target,\n        RevertContext calldata revertContext\n    )\n        external\n        nonReentrant\n        onlyProtocol\n        whenNotPaused\n    {\n        if (target == address(0)) revert ZeroAddress();\n\n        Revertable(target).onRevert(revertContext);\n    }\n\n    /// @notice Deposit foreign coins into ZRC20 and revert a user-specified contract on ZEVM.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to revert.\n    /// @param target The target contract to call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function depositAndRevert(\n        address zrc20,\n        uint256 amount,\n        address target,\n        RevertContext calldata revertContext\n    )\n        external\n        nonReentrant\n        onlyProtocol\n        whenNotPaused\n    {\n        if (zrc20 == address(0) || target == address(0)) revert ZeroAddress();\n        if (amount == 0) revert InsufficientZRC20Amount();\n        if (target == PROTOCOL_ADDRESS || target == address(this)) revert InvalidTarget();\n\n        if (!IZRC20(zrc20).deposit(target, amount)) revert ZRC20DepositFailed();\n        Revertable(target).onRevert(revertContext);\n    }\n\n    /// @notice Call onAbort on a user-specified contract on ZEVM.\n    /// this function doesn't deposit the asset to the target contract. This operation is done directly by the protocol.\n    /// the assets are deposited to the target contract even if onAbort reverts.\n    /// @param target The target contract to call.\n    /// @param abortContext Abort context to pass to onAbort.\n    function executeAbort(\n        address target,\n        AbortContext calldata abortContext\n    )\n        external\n        nonReentrant\n        onlyProtocol\n        whenNotPaused\n    {\n        if (target == address(0)) revert ZeroAddress();\n        Abortable(target).onAbort(abortContext);\n    }\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport \"../../../contracts/Revert.sol\";\nimport \"./UniversalContract.sol\";\n\n/// @title IGatewayZEVMEvents\n/// @notice Interface for the events emitted by the GatewayZEVM contract.\ninterface IGatewayZEVMEvents {\n    /// @notice Emitted when a cross-chain call is made.\n    /// @param sender The address of the sender.\n    /// @param zrc20 Address of zrc20 to pay fees.\n    /// @param receiver The receiver address on the external chain.\n    /// @param message The calldata passed to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    event Called(\n        address indexed sender,\n        address indexed zrc20,\n        bytes receiver,\n        bytes message,\n        CallOptions callOptions,\n        RevertOptions revertOptions\n    );\n\n    /// @notice Emitted when a withdrawal is made.\n    /// @param sender The address from which the tokens are withdrawn.\n    /// @param chainId Chain id of external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param value The amount of tokens withdrawn.\n    /// @param gasfee The gas fee for the withdrawal.\n    /// @param protocolFlatFee The protocol flat fee for the withdrawal.\n    /// @param message The calldata passed with the withdraw. No longer used. Kept to maintain compatibility.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    event Withdrawn(\n        address indexed sender,\n        uint256 indexed chainId,\n        bytes receiver,\n        address zrc20,\n        uint256 value,\n        uint256 gasfee,\n        uint256 protocolFlatFee,\n        bytes message,\n        CallOptions callOptions,\n        RevertOptions revertOptions\n    );\n\n    /// @notice Emitted when a withdraw and call is made.\n    /// @param sender The address from which the tokens are withdrawn.\n    /// @param chainId Chain id of external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param value The amount of tokens withdrawn.\n    /// @param gasfee The gas fee for the withdrawal.\n    /// @param protocolFlatFee The protocol flat fee for the withdrawal.\n    /// @param message The calldata passed to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    event WithdrawnAndCalled(\n        address indexed sender,\n        uint256 indexed chainId,\n        bytes receiver,\n        address zrc20,\n        uint256 value,\n        uint256 gasfee,\n        uint256 protocolFlatFee,\n        bytes message,\n        CallOptions callOptions,\n        RevertOptions revertOptions\n    );\n}\n\n/// @title IGatewayZEVMErrors\n/// @notice Interface for the errors used in the GatewayZEVM contract.\ninterface IGatewayZEVMErrors {\n    /// @notice Error indicating a withdrawal failure.\n    error WithdrawalFailed();\n\n    /// @notice Error indicating an insufficient ZRC20 token amount.\n    error InsufficientZRC20Amount();\n\n    /// @notice Error indicating an insufficient zeta amount.\n    error InsufficientZetaAmount();\n\n    /// @notice Error indicating a failure to burn ZRC20 tokens.\n    error ZRC20BurnFailed();\n\n    /// @notice Error indicating a failure to transfer ZRC20 tokens.\n    error ZRC20TransferFailed();\n\n    /// @notice Error indicating a failure to deposit ZRC20 tokens.\n    error ZRC20DepositFailed();\n\n    /// @notice Error indicating a failure to transfer gas fee.\n    error GasFeeTransferFailed();\n\n    /// @notice Error indicating that the caller is not the protocol account.\n    error CallerIsNotProtocol();\n\n    /// @notice Error indicating an invalid target address.\n    error InvalidTarget();\n\n    /// @notice Error indicating a failure to send ZETA tokens.\n    error FailedZetaSent();\n\n    /// @notice Error indicating that only WZETA or the protocol address can call the function.\n    error OnlyWZETAOrProtocol();\n\n    /// @notice Error indicating an insufficient gas limit.\n    error InsufficientGasLimit();\n\n    /// @notice Error indicating message size exceeded in external functions.\n    error MessageSizeExceeded();\n}\n\n/// @title IGatewayZEVM\n/// @notice Interface for the GatewayZEVM contract.\n/// @dev Defines functions for cross-chain interactions and token handling.\ninterface IGatewayZEVM is IGatewayZEVMErrors, IGatewayZEVMEvents {\n    /// @notice Withdraw ZRC20 tokens to an external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param revertOptions Revert options.\n    function withdraw(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        RevertOptions calldata revertOptions\n    )\n        external;\n\n    /// @notice Withdraw ZETA tokens to an external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param revertOptions Revert options.\n    function withdraw(\n        bytes memory receiver,\n        uint256 amount,\n        uint256 chainId,\n        RevertOptions calldata revertOptions\n    )\n        external;\n\n    /// @notice Withdraw ZRC20 tokens and call a smart contract on an external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param message The calldata to pass to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        bytes calldata message,\n        CallOptions calldata callOptions,\n        RevertOptions calldata revertOptions\n    )\n        external;\n\n    /// @notice Withdraw ZETA tokens and call a smart contract on an external chain.\n    /// @param receiver The receiver address on the external chain.\n    /// @param amount The amount of tokens to withdraw.\n    /// @param chainId Chain id of the external chain.\n    /// @param message The calldata to pass to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        uint256 chainId,\n        bytes calldata message,\n        CallOptions calldata callOptions,\n        RevertOptions calldata revertOptions\n    )\n        external;\n\n    /// @notice Call a smart contract on an external chain without asset transfer.\n    /// @param receiver The receiver address on the external chain.\n    /// @param zrc20 Address of zrc20 to pay fees.\n    /// @param message The calldata to pass to the contract call.\n    /// @param callOptions Call options including gas limit and arbirtrary call flag.\n    /// @param revertOptions Revert options.\n    function call(\n        bytes memory receiver,\n        address zrc20,\n        bytes calldata message,\n        CallOptions calldata callOptions,\n        RevertOptions calldata revertOptions\n    )\n        external;\n\n    /// @notice Deposit foreign coins into ZRC20.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to deposit.\n    /// @param target The target address to receive the deposited tokens.\n    function deposit(address zrc20, uint256 amount, address target) external;\n\n    /// @notice Execute a user-specified contract on ZEVM.\n    /// @param context The context of the cross-chain call.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to transfer.\n    /// @param target The target contract to call.\n    /// @param message The calldata to pass to the contract call.\n    function execute(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    )\n        external;\n\n    /// @notice Deposit foreign coins into ZRC20 and call a user-specified contract on ZEVM.\n    /// @param context The context of the cross-chain call.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to transfer.\n    /// @param target The target contract to call.\n    /// @param message The calldata to pass to the contract call.\n    function depositAndCall(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    )\n        external;\n\n    /// @notice Deposit ZETA and call a user-specified contract on ZEVM.\n    /// @param context The context of the cross-chain call.\n    /// @param amount The amount of tokens to transfer.\n    /// @param target The target contract to call.\n    /// @param message The calldata to pass to the contract call.\n    function depositAndCall(\n        MessageContext calldata context,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    )\n        external;\n\n    /// @notice Revert a user-specified contract on ZEVM.\n    /// @param target The target contract to call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function executeRevert(address target, RevertContext calldata revertContext) external;\n\n    /// @notice Deposit foreign coins into ZRC20 and revert a user-specified contract on ZEVM.\n    /// @param zrc20 The address of the ZRC20 token.\n    /// @param amount The amount of tokens to revert.\n    /// @param target The target contract to call.\n    /// @param revertContext Revert context to pass to onRevert.\n    function depositAndRevert(\n        address zrc20,\n        uint256 amount,\n        address target,\n        RevertContext calldata revertContext\n    )\n        external;\n}\n\n/// @notice CallOptions struct passed to call and withdrawAndCall functions.\n/// @param gasLimit Gas limit.\n/// @param isArbitraryCall Indicates if call should be arbitrary or authenticated.\nstruct CallOptions {\n    uint256 gasLimit;\n    bool isArbitraryCall;\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/zevm/interfaces/IWZETA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\n/// @title IWETH9\n/// @notice Interface for the Weth9 contract.\ninterface IWETH9 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 wad) external returns (bool);\n\n    function transfer(address to, uint256 wad) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 wad) external returns (bool);\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/zevm/interfaces/IZRC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\n/// @title IZRC20\n/// @notice Interface for the ZRC20 token contract.\ninterface IZRC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function deposit(address to, uint256 amount) external returns (bool);\n\n    function burn(uint256 amount) external returns (bool);\n\n    function withdraw(bytes memory to, uint256 amount) external returns (bool);\n\n    function withdrawGasFee() external view returns (address, uint256);\n\n    function withdrawGasFeeWithGasLimit(uint256 gasLimit) external view returns (address, uint256);\n\n    /// @dev Name is in upper case to maintain compatibility with ZRC20.sol v1\n    function PROTOCOL_FLAT_FEE() external view returns (uint256);\n\n    /// @dev Name is in upper case to maintain compatibility with ZRC20.sol v1\n    function GAS_LIMIT() external view returns (uint256);\n\n    function setName(string memory newName) external;\n\n    function setSymbol(string memory newSymbol) external;\n}\n\n/// @title IZRC20Metadata\n/// @notice Interface for the ZRC20 metadata.\ninterface IZRC20Metadata is IZRC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\n/// @title ZRC20Events\n/// @notice Interface for the ZRC20 events.\ninterface ZRC20Events {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Deposit(bytes from, address indexed to, uint256 value);\n    event Withdrawal(address indexed from, bytes to, uint256 value, uint256 gasFee, uint256 protocolFlatFee);\n    event UpdatedSystemContract(address systemContract);\n    event UpdatedGateway(address gateway);\n    event UpdatedGasLimit(uint256 gasLimit);\n    event UpdatedProtocolFlatFee(uint256 protocolFlatFee);\n}\n\n/// @dev Coin types for ZRC20. Zeta value should not be used.\nenum CoinType {\n    Zeta,\n    Gas,\n    ERC20\n}\n"
    },
    "@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.26;\n\nimport { RevertContext } from \"../../../contracts/Revert.sol\";\n\n/// @custom:deprecated should be removed once v2 SystemContract is not used anymore.\n/// MessageContext should be used\nstruct zContext {\n    bytes origin;\n    address sender;\n    uint256 chainID;\n}\n\n/// @custom:deprecated should be removed once v2 SystemContract is not used anymore.\n/// UniversalContract should be used\ninterface zContract {\n    function onCrossChainCall(\n        zContext calldata context,\n        address zrc20,\n        uint256 amount,\n        bytes calldata message\n    )\n        external;\n}\n\nstruct MessageContext {\n    bytes origin;\n    address sender;\n    uint256 chainID;\n}\n\ninterface UniversalContract {\n    function onCall(MessageContext calldata context, address zrc20, uint256 amount, bytes calldata message) external;\n}\n"
    },
    "contracts/EddyGatewayCrossChain.sol": {
      "content": "pragma solidity ^0.8.20;\nimport \"./libraries/BytesHelperLib.sol\";\nimport \"./libraries/SwapHelperLib.sol\";\nimport \"./libraries/UniswapV2Library.sol\";\nimport \"./interfaces/IWETH9.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\";\nimport {GatewayZEVM} from \"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\";\nimport \"./interfaces/IEddyStableSwap.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\ncontract EddyGatewayCrossChain is UniversalContract,Initializable, OwnableUpgradeable, UUPSUpgradeable{\n    address public constant BTC_ZETH = 0x13A0c5930C028511Dc02665E7285134B6d11A5f4;\n    address public constant WZETA = 0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf;\n    address internal constant USDC_BSC = 0x05BA149A7bd6dC1F937fA9046A9e05C05f3b18b0;\n    address internal constant USDC_ETH = 0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a;\n    address internal constant USDT_ETH = 0x7c8dDa80bbBE1254a7aACf3219EBe1481c6E01d7;\n    address internal constant USDT_BSC = 0x91d4F0D54090Df2D81e834c3c8CE71C6c865e79F;\n    address public constant UniswapRouter = 0x2ca7d64A7EFE2D62A725E2B35Cf7230D6677FfEe;\n    address public constant UniswapFactory = 0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c;\n    uint16 internal constant MAX_DEADLINE = 200;\n    address private constant EddyTreasurySafe = 0xD8242f33A3CFf8542a3F71196eB2e63a26E6059F;\n    address internal constant FOUR_POOL = 0x448028804461e8e5a8877c228F3adFd58c3Da6B6;\n    address internal constant ULTI_STABLESWAP = 0x89cb3fA2A7910A268e9f7F619108aFADBD7587c4;\n    address internal constant ULTI_ETH = 0xe573a6e11f8506620F123DBF930222163D46BCB6;\n    address internal constant ULTI_BSC = 0xD10932EB3616a937bd4a2652c87E9FeBbAce53e5;\n    uint256 public feePercent;\n    uint256 public gasLimit;\n    uint256 public slippage;\n    mapping(address => uint256) public tokenToIndex;\n    GatewayZEVM public gateway;\n    struct DecodedMessage {\n        address targetZRC20;\n        bool isTargetZRC20;\n        address intermediateToken;\n        address contractAddress;\n        bytes32[] proof;\n        uint32 destChainId;\n        bool isV3Swap;\n    }\n    bytes32 public merkleRoot;\n    uint256 public customFee;\n    uint256 constant BITCOIN = 8332;\n    mapping (uint256 => address) public chainToContract;\n    mapping (uint256 => address) public chainToIntermediateToken;\n    address constant abortAddress = address(0);\n     struct HandleSwapAndSendTokensParams {\n        address targetZRC20;\n        address gasZRC20CC;\n        uint256 gasFeeCC;\n        address sender;\n        uint256 targetAmount;\n        address inputToken;\n    }\n    uint32 constant BITCOIN_EDDY = 9999; // chain Id from eddy db\n    uint32 constant SOLANA_EDDY = 88888; // chain Id from eddy db\n    mapping (uint256 => address) public solanaTokenToZrc20;\n    mapping(address => uint24) public feeTierToToken;\n    address internal constant UNISWAP_ROUTER_V3 = 0x9b30CfbACD3504252F82263F72D6acf62bf733C2;\n    address internal constant QUOTER_V2 = 0xce1b1d19d0D16326f5D7Ea315adB376a93ABC84d;\n    error WrongAmount();\n    error ApprovalFailed();\n    error NoPriceData();\n    error IdenticalAddresses();\n    error ZeroAddress();\n    error Unauthorized();\n    error WrongGasContract();\n    error NotEnoughToPayGasFee();\n\n    modifier onlyGateway() {\n        if (msg.sender != address(gateway)) revert Unauthorized();\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Function to update slippage\n     * @param _slippage Slippage percentage in basis points (e.g., 10 = 1%)\n     */\n    function updateSlippage(uint256 _slippage) external onlyOwner {\n        slippage = _slippage;\n    }\n\n    function updateIndexForToken(address token, uint256 index) external onlyOwner {\n        tokenToIndex[token] = index;\n    }\n\n\n    /**\n     * Set new fee percentage only by owner\n     * @param _feePercent Fee percentage in basis points (e.g., 10 = 1%)\n     */\n    function setFeePercent(uint256 _feePercent) public onlyOwner {\n        feePercent = _feePercent;\n    }\n\n    /**\n     * Set merkle root only by owner\n     * @param _merkleRoot Merkle root\n     */\n    \n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * Set custom fee only by owner\n     * @param _customFee Custom fee\n     */\n    function setCustomFee(uint256 _customFee) external onlyOwner {\n        customFee = _customFee;\n    }\n\n    /**\n     * Set gas limit only by owner\n     * @param _gasLimit Gas limit\n     */\n\n    function setGasLimit(uint256 _gasLimit) external onlyOwner {\n        gasLimit = _gasLimit;\n    }\n\n    /**\n     * Function to update mapping of fee tier to token\n     * @param token Token address\n     * @param feeTier Univ3 fee tier\n     */\n    function updateFeeTierToToken(address token, uint24 feeTier) external onlyOwner {\n        feeTierToToken[token] = feeTier;\n    }\n\n    /**\n     * @dev Initialize the contract\n     * @param gatewayAddress Gateway contract address\n     * @param _feePercent Fee percentage in basis points (e.g., 10 = 1%)\n     */\n\n    function initialize(\n        address payable gatewayAddress,\n        uint256 _feePercent,\n        uint256 _slippage,\n        uint256 _gasLimit\n    ) public initializer {\n        __Ownable_init(msg.sender);\n        __UUPSUpgradeable_init();\n        gateway = GatewayZEVM(gatewayAddress);\n        feePercent = _feePercent;\n        slippage = _slippage;\n        gasLimit = _gasLimit;\n    }\n\n    event EddyCrossChainSwap(\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 outputAmount,\n        address walletAddress,\n        uint256 fees\n    );\n\n     function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /**\n     * @notice Function to add contract address on destination chain\n     * @param chainId Chain ID \n     * @param contractAddress  Contract address on destination chain \n     */\n    function addChainToContract(uint256 chainId, address contractAddress) external onlyOwner {\n        chainToContract[chainId] = contractAddress;\n    }\n\n\n    /**\n     * @notice Function to add intermediate token address on destination chain\n     * @param chainId Chain ID \n     * @param intermediateToken ZRC20 address of intermediate token\n     */\n    function addChainToIntermediateToken(uint256 chainId, address intermediateToken) external onlyOwner {\n        chainToIntermediateToken[chainId] = intermediateToken;\n    }\n\n    /**\n     * @notice Function to add solana token to zrc20 mapping\n     * @param tokenId Token ID\n     * @param zrc20 ZRC20 address\n     */\n    function addSolanaTokenToZrc20(uint256 tokenId, address zrc20) external onlyOwner {\n        solanaTokenToZrc20[tokenId] = zrc20;\n\n    }\n\n    /**\n     * @notice Function to decode solana wallet address\n     * @param data Data \n     * @param offset Offset\n     */\n    function bytesToSolana(\n        bytes calldata data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(44);\n        for (uint i = 0; i < 44; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n        return bech32Bytes;\n    }\n\n    /**\n     * @notice - Function to withdraw using gateway\n     * @param _sender Sender address\n     * @param _inputToken input token address\n     * @param _outputToken output token address\n     * @param _amount amount to withdraw\n     */\n    function withdraw(\n        bytes memory _sender,\n        address _inputToken,\n        address _outputToken,\n        uint256 _amount\n    ) public {\n        gateway.withdraw(\n            _sender,\n            _amount,\n            _outputToken,\n               RevertOptions({\n                    revertAddress: address(this),\n                    callOnRevert: true,\n                    abortAddress: abortAddress,\n                    revertMessage: abi.encode(_sender, _inputToken),\n                    onRevertGasLimit: gasLimit\n                })\n        );\n    }\n\n    /**\n     * Swap and send ERC20 tokens\n     * @param targetZRC20 Target ZRC20\n     * @param gasZRC20 Gas ZRC20\n     * @param gasFee Gas fee\n     * @param recipient Receipient\n     * @param targetAmount Target amount\n     * @param inputToken Input token\n     * @return amountsOut Amounts out\n     */\n\n    function _swapAndSendERC20TokensUniV2(\n        address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee,\n        bytes memory recipient,\n        uint256 targetAmount,\n        address inputToken\n    ) internal returns(uint256 amountsOut) {\n\n        // Get amountOut for Input gasToken\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsIn(\n            UniswapFactory,\n            gasFee,\n            getPathForTokens(targetZRC20, gasZRC20) // [gasAmount ,zetaAmount,usdcAmount] USDC.BSC -> target , gas ->BNB.BNB\n        );\n\n        uint amountInMax = (amountsQuote[0]) + (slippage * amountsQuote[0]) / 1000;\n\n        // Give approval to uniswap\n        IZRC20(targetZRC20).approve(UniswapRouter, amountInMax);\n        require(IZRC20(targetZRC20).allowance(address(this), UniswapRouter) >= amountInMax, \"INSUFFICIENT_ALLOWANCE IN _swapAndSendERC20Tokens\");\n\n        // Swap gasFees for targetZRC20\n        // Revert possibility\n        uint[] memory amounts = IUniswapV2Router01(UniswapRouter)\n            .swapTokensForExactTokens(\n                gasFee, // Amount of gas token required\n                amountInMax,\n                getPathForTokens(targetZRC20, gasZRC20), //path[0] = targetZRC20, path[1] = gasZRC20\n                address(this),\n                block.timestamp + MAX_DEADLINE\n        );\n       \n        require(IZRC20(gasZRC20).balanceOf(address(this)) >= gasFee, \"INSUFFICIENT_GAS_FOR_WITHDRAW\");\n\n        require(targetAmount - amountInMax > 0, \"INSUFFICIENT_AMOUNT_FOR_WITHDRAW\");\n\n        // Gateway changes\n        if (!IZRC20(gasZRC20).approve(address(gateway), gasFee)) {\n            revert ApprovalFailed();\n        }\n        \n        if (!IZRC20(targetZRC20).approve(address(gateway), targetAmount - amounts[0])) {\n            revert ApprovalFailed();\n        }\n\n        withdraw(recipient,inputToken, targetZRC20, targetAmount- amounts[0]);\n\n        amountsOut = targetAmount - amountInMax;\n        \n    }\n\n    /**\n     * Swap and send ERC20 tokens\n     * @param targetZRC20 Target ZRC20\n     * @param gasZRC20 Gas ZRC20\n     * @param gasFee Gas fee\n     * @param recipient Recipient\n     * @param targetAmount Target amount\n     * @param inputToken Input token\n     * @return amountsOut Amounts out\n     */\n    function _swapAndSendERC20UniV3(\n       address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee,\n        bytes memory recipient,\n        uint256 targetAmount,\n        address inputToken\n    ) internal returns(uint256 amountsOut) {\n        uint24 feeTierTarget = feeTierToToken[targetZRC20];\n        uint24 feeTierGas = feeTierToToken[gasZRC20];\n        bytes memory path;\n        if(targetZRC20 == USDC_ETH){\n            // @dev - path in reverse order\n            path = abi.encodePacked(gasZRC20,feeTierGas,targetZRC20);\n        }else {\n            //@dev - path in reverse order\n            path = abi.encodePacked(gasZRC20,feeTierGas,USDC_ETH,feeTierTarget,targetZRC20);\n        }\n        // Get amountOut for Input gasToken\n        (uint256 amountInMax, , , ) = IQuoterV2(address(QUOTER_V2)).quoteExactOutput(path, gasFee);\n        amountInMax =  amountInMax + (slippage * amountInMax) / 1000;\n        // Give approval to uniswap\n        IZRC20(targetZRC20).approve(UNISWAP_ROUTER_V3, amountInMax);\n        require(IZRC20(targetZRC20).allowance(address(this), UNISWAP_ROUTER_V3) >= amountInMax, \"INSUFFICIENT_ALLOWANCE IN _swapAndSendERC20Tokens\");\n\n        // Execute the swap using Uniswap V3\n        ISwapRouter.ExactOutputParams memory params = ISwapRouter.ExactOutputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp + MAX_DEADLINE,\n            amountOut: gasFee,\n            amountInMaximum: amountInMax\n        });\n\n        // Swap gasFees for targetZRC20\n        uint256 amountUsed = ISwapRouter(UNISWAP_ROUTER_V3).exactOutput(params);\n\n        require(IZRC20(gasZRC20).balanceOf(address(this)) >= gasFee, \"INSUFFICIENT_GAS_FOR_WITHDRAW\");\n\n        // Gateway changes\n        if (!IZRC20(gasZRC20).approve(address(gateway), gasFee)) {\n            revert ApprovalFailed();\n        }\n        \n        if (!IZRC20(targetZRC20).approve(address(gateway), targetAmount - amountUsed)) {\n            revert ApprovalFailed();\n        }\n\n        // Withdraw gasFees     \n        withdraw(recipient,inputToken, targetZRC20, targetAmount- amountUsed);\n        amountsOut = targetAmount - amountUsed;\n\n    }\n\n\n     /**\n     * Swap and send erc20 tokens after receiving gas fee\n     * @param targetZRC20 Target ZRC20\n     * @param gasZRC20 Gas ZRC20\n     * @param gasFee Gas fee\n     * @param recipient Recipient\n     * @param targetAmount Target amount\n     * @param inputToken Input token\n     * @param isV3Swap swap using v3 or v2\n     */\n    function _swapAndSendERC20Tokens(\n        address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee,\n        bytes memory recipient,\n        uint256 targetAmount,\n        address inputToken,\n        bool isV3Swap\n    ) internal returns(uint256 amountsOut) {\n        if(isV3Swap){\n            amountsOut = _swapAndSendERC20UniV3(\n                targetZRC20,\n                gasZRC20,\n                gasFee,\n                recipient,\n                targetAmount,\n                inputToken\n            );\n        }else{\n            amountsOut = _swapAndSendERC20TokensUniV2(\n                targetZRC20,\n                gasZRC20,\n                gasFee,\n                recipient,\n                targetAmount,\n                inputToken\n            );\n        }\n    }\n\n\n\n    \n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) revert IdenticalAddresses();\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (token0 == address(0)) revert ZeroAddress();\n    }\n\n    function uniswapv2PairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) public pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n     function _existsPairPool(\n        address uniswapV2Factory,\n        address zrc20A,\n        address zrc20B\n    ) internal view returns (bool) {\n        address uniswapPool = uniswapv2PairFor(\n            uniswapV2Factory,\n            zrc20A,\n            zrc20B\n        );\n        return\n            IZRC20(zrc20A).balanceOf(uniswapPool) > 0 &&\n            IZRC20(zrc20B).balanceOf(uniswapPool) > 0;\n    }\n\n    function getPathForTokens(\n        address zrc20,\n        address targetZRC20\n    ) internal view returns(address[] memory path) {\n        bool existsPairPool = _existsPairPool(\n            UniswapFactory,\n            zrc20,\n            targetZRC20\n        );\n\n        if (existsPairPool) {\n            path = new address[](2);\n            path[0] = zrc20;\n            path[1] = targetZRC20;\n        } else {\n            path = new address[](3);\n            path[0] = zrc20;\n            path[1] = WZETA;\n            path[2] = targetZRC20;\n        }\n    }\n\n    /**\n     * @notice Function to swap zrc20 to target zrc20\n     * @param _zrc20 ZRC20 address\n     * @param _amount Amount to swap\n     * @param _targetZRC20 Target ZRC20 address\n     * @param _minAmountOut Minimum amount out\n     * @param isV3Swap swap using v3 or v2\n     */\n    function _swap(\n        address _zrc20,//USDT.ETH\n        uint256 _amount,\n        address _targetZRC20, // USDC.BSC\n        uint256 _minAmountOut,\n        bool isV3Swap\n    ) internal returns (uint256 outputAmount){\n         if((_zrc20 == USDC_BSC || _zrc20 == USDC_ETH || _zrc20 == USDT_ETH || _zrc20 == USDT_BSC) && (_targetZRC20 == USDC_BSC || _targetZRC20 == USDC_ETH || _targetZRC20 == USDT_ETH || _targetZRC20 == USDT_BSC)){\n             IZRC20(_zrc20).approve(FOUR_POOL, _amount);\n             outputAmount = IEddyStableSwap(FOUR_POOL).exchange(tokenToIndex[_zrc20],tokenToIndex[_targetZRC20], _amount, _minAmountOut);    \n        }else if((_zrc20 == ULTI_ETH || _zrc20 == ULTI_BSC) && (_targetZRC20 == ULTI_ETH || _targetZRC20 == ULTI_BSC)){\n             IZRC20(_zrc20).approve(ULTI_STABLESWAP, _amount);\n             outputAmount = IEddyStableSwap(ULTI_STABLESWAP).exchange(tokenToIndex[_zrc20],tokenToIndex[_targetZRC20], _amount, _minAmountOut);\n        }else if(isV3Swap){\n            outputAmount = SwapHelperLib._doSwapV3(\n                UNISWAP_ROUTER_V3,\n                USDC_ETH,\n                _zrc20,\n                _targetZRC20,\n                _amount,\n                _minAmountOut,\n                feeTierToToken[_zrc20],\n                feeTierToToken[_targetZRC20]\n            );\n        }else{\n            outputAmount = SwapHelperLib._doSwap(\n                WZETA,\n                UniswapFactory,\n                UniswapRouter,\n                _zrc20,\n                _amount,\n                _targetZRC20,\n                _minAmountOut\n            );\n        }\n\n    }\n\n    /**\n     * @notice Function to call external contract on dest chain using gateway\n     * @param receiver Receiver address\n     * @param amount Amount to send\n     * @param zrc20 ZRC20 address\n     * @param message Message\n     * @param callOptions Call options\n     * @param revertOptions Revert options\n     */\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        bytes memory message,\n        CallOptions memory callOptions,\n        RevertOptions memory revertOptions\n    ) public {\n        gateway.withdrawAndCall(\n            receiver,\n            amount,\n            zrc20,\n            message,\n            callOptions,\n            revertOptions\n        );\n    }\n\n\n    function getSelector(string memory functionSignature) private pure returns (bytes4) {\n        return bytes4(keccak256(bytes(functionSignature)));\n    }\n\n\n    function handleEvmWithdraw(\n        address contractAddress,\n        address zrc20,\n        address tokenToUse,\n        address targetZRC20,\n        uint256 outputAmount,\n        uint256 gasFeeCC,\n        address evmWalletAddress\n    ) private {\n\n        require(contractAddress != address(0), \"ZERO_ADDRESS\");\n\n        require(tokenToUse != address(0), \"ZERO_ADDRESS\");\n\n\n        if (!IZRC20(tokenToUse).approve(address(gateway), outputAmount + gasFeeCC)) {\n            revert ApprovalFailed();\n        }\n        \n        // Calculate the function selector\n        bytes4 selector = getSelector(\"swapETHtoERC20(uint256,address,address)\");\n\n         withdrawAndCall(\n            abi.encodePacked(contractAddress),\n            outputAmount - gasFeeCC,\n            tokenToUse,\n            abi.encodeWithSelector(selector,outputAmount - gasFeeCC,targetZRC20,evmWalletAddress),\n            CallOptions({\n                isArbitraryCall: true,\n                gasLimit: gasLimit\n            }),\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: abortAddress,\n                revertMessage: abi.encode(evmWalletAddress,zrc20),\n                onRevertGasLimit: gasLimit\n            })\n        );\n    }\n\n    function decodeMessage(bytes calldata message) internal pure returns (DecodedMessage memory) {\n        // First check basic length for required fields (target + bool)\n        require(message.length >= 76, \"Invalid message length\"); //  4+ 20 + 20 + 32 bytes minimum\n\n        //Decode destination chainId here \n        uint32 chainId = BytesHelperLib.bytesToUint32(message,0); // 4\n        // First decode the target and bool\n        address targetZRC20 = BytesHelperLib.bytesToAddress(message, 4); // 4 + 20 = 24\n\n        bool isTargetZRC20;\n        bool isV3Swap;\n        if(chainId == BITCOIN_EDDY){\n           require(message.length >= 98, \"Invalid message length for BTC\");\n           isTargetZRC20 = abi.decode(message[66:98],(bool)); // 24(targetZRC20) + 42 bytes(bechdata)\n           isV3Swap = BytesHelperLib.bytesToBool(message, 98);\n        }else if (chainId == SOLANA_EDDY){\n            require(message.length >= 100, \"Invalid message length for SOLANA\");\n            isTargetZRC20 = abi.decode(message[68:100],(bool)); // 24(targetZRC20) + 44 bytes(bechdata)\n            isV3Swap = BytesHelperLib.bytesToBool(message, 100);\n        }else {\n            isTargetZRC20 = abi.decode(message[44:76],(bool));\n            isV3Swap = BytesHelperLib.bytesToBool(message, 76);\n        }\n    \n        // Initialize additional addresses to zero address\n        address intermediateToken = address(0);  \n        address contractAddress = address(0); \n        bytes32[] memory proof;\n        uint256 proofStartOffset;\n\n    \n        // Only decode additional addresses if isTargetZRC20 is FALSE and they are provided\n        if (!isTargetZRC20 && message.length >= 116) {\n            intermediateToken = BytesHelperLib.bytesToAddress(message, 77);\n            contractAddress = BytesHelperLib.bytesToAddress(message, 97);\n            proofStartOffset = 117;\n        }else{\n            if(chainId == BITCOIN_EDDY){\n                proofStartOffset = 99;\n            }else if(chainId == SOLANA_EDDY){\n                proofStartOffset = 101;\n            }else{\n                proofStartOffset = 77;\n            }\n        }\n        // Decode proof if there's data after the addresses\n        if (message.length > proofStartOffset) {\n            // Get the offset of the array data\n            uint256 arrayOffset;\n            assembly {\n                arrayOffset := calldataload(add(message.offset, proofStartOffset))\n            }\n        \n            // Read array length\n            uint256 proofLength;\n            assembly {\n                let lengthPosition := add(add(message.offset, proofStartOffset), arrayOffset)\n                proofLength := calldataload(lengthPosition)\n            }\n        \n            // Initialize proof array\n            proof = new bytes32[](proofLength);\n        \n            // Read proof elements\n            uint256 elementsStart = proofStartOffset + arrayOffset + 32;\n        \n            for(uint256 i = 0; i < proofLength; i++) {\n                assembly {\n                    let elementPosition := add(add(message.offset, elementsStart), mul(i, 32))\n                    mstore(add(proof, add(32, mul(i, 32))), calldataload(elementPosition))\n                }\n            }\n        } else {\n            // If no proof data, initialize empty array\n            proof = new bytes32[](0);\n        }\n        \n\n        return DecodedMessage({\n            targetZRC20: targetZRC20,\n            isTargetZRC20: isTargetZRC20,\n            intermediateToken: intermediateToken,\n            contractAddress: contractAddress,\n            proof: proof,\n            destChainId: chainId,\n            isV3Swap: isV3Swap\n        });\n    }\n\n    function decodeMessageBitcoin(\n        bytes calldata message\n    ) public view returns (DecodedMessage memory) {\n        require(message.length >= 40, \"Invalid message length\");\n        // targetZRC20 + evmWallet + isTargetZRC20 + chainId\n        // 20 + 20 + 1 + 4 = 45\n        // Only if dest chain is solana\n        // chainID + tokenId + evmWallet + isTargetZRC20\n        // 4 + 4 + 44 + 1 = 53\n        uint32 chainId = BytesHelperLib.bytesToUint32(message,0); // 4\n        address targetZRC20;\n        if(chainId == SOLANA_EDDY){\n            uint32 tokenId = BytesHelperLib.bytesToUint32(message,4); //4\n            targetZRC20 = solanaTokenToZrc20[tokenId];\n        }else{\n            targetZRC20 = BytesHelperLib.bytesToAddress(message, 4); //20\n        }\n        bool isTargetZRC20 = chainId == SOLANA_EDDY ? BytesHelperLib.bytesToBool(message,52)  : BytesHelperLib.bytesToBool(message, 44); //1\n        bool isV3Swap = chainId == SOLANA_EDDY ? BytesHelperLib.bytesToBool(message, 53) : BytesHelperLib.bytesToBool(message, 45); //1\n        if(!isTargetZRC20 && message.length >= 45){\n            return DecodedMessage({\n                targetZRC20: targetZRC20,\n                isTargetZRC20: isTargetZRC20,\n                intermediateToken: chainToIntermediateToken[chainId],\n                contractAddress: chainToContract[chainId],\n                proof: new bytes32[](0),\n                destChainId: chainId,\n                isV3Swap: isV3Swap\n            });\n        }else{\n            return DecodedMessage({\n                targetZRC20: targetZRC20,\n                isTargetZRC20: isTargetZRC20,\n                intermediateToken: address(0),\n                contractAddress: address(0),\n                proof: new bytes32[](0),\n                destChainId: chainId,\n                isV3Swap: isV3Swap\n            });\n        }\n        \n    }\n    \n\n    \n    function _handleBTCCase(\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 platformFeesForTx,\n        bytes calldata message,\n        bool isV3Swap\n    ) private {\n        uint256 swapAmount = amount - platformFeesForTx;\n        bytes memory recipientAddressBech32 = bytesToBech32Bytes(message, 24);\n        uint256 outputAmount = _swap(zrc20, swapAmount, targetZRC20, amountOutMin,isV3Swap);\n        (, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n        if (outputAmount < gasFee) revert WrongAmount();\n\n        if(!IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee)) {\n            revert ApprovalFailed();\n        }\n\n        withdraw(recipientAddressBech32, zrc20, targetZRC20, outputAmount - gasFee);\n        _handleBTCEvent(evmWalletAddress, zrc20, targetZRC20, amount, outputAmount, platformFeesForTx);\n    }\n\n    function _handleSolanaCase(\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 platformFeesForTx,\n        bytes calldata message,\n        bool isV3Swap\n    ) private {\n        uint256 swapAmount = amount - platformFeesForTx;\n        bytes memory recipientAddressBech32 = bytesToSolana(message, 24);\n        uint256 outputAmount = _swap(zrc20, swapAmount, targetZRC20, amountOutMin,isV3Swap);\n        (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n        if(targetZRC20 == gasZRC20) {\n            if (outputAmount < gasFee) revert WrongAmount();\n            if(!IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee)) {\n                revert ApprovalFailed();\n            }\n            withdraw(recipientAddressBech32, zrc20, targetZRC20, outputAmount - gasFee);\n            _handleBTCEvent(evmWalletAddress, zrc20, targetZRC20, amount, outputAmount - gasFee, platformFeesForTx);\n        }else{\n            uint256 amountAfterGasFees = _swapAndSendERC20Tokens(\n                targetZRC20,\n                gasZRC20,\n                gasFee,\n                recipientAddressBech32,\n                outputAmount,\n                zrc20,\n                isV3Swap\n            );\n\n            _handleBTCEvent(evmWalletAddress, zrc20, targetZRC20, amount,amountAfterGasFees, platformFeesForTx);\n        }\n    }\n    \n\n    function _handleBTCToSolanaCase(\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 amountOutMin,\n        uint256 platformFeesForTx,\n        bytes calldata message,\n        bool isV3Swap\n    ) private {\n        uint256 swapAmount = amount - platformFeesForTx;\n        bytes memory recipientAddressBech32 = bytesToSolana(message,8);\n        uint256 outputAmount = _swap(zrc20, swapAmount, targetZRC20, amountOutMin,isV3Swap);\n        (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n\n        if(targetZRC20 == gasZRC20) {\n            if (outputAmount < gasFee) revert WrongAmount();\n            if(!IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee)) {\n                revert ApprovalFailed();\n            }\n\n            withdraw(recipientAddressBech32, zrc20, targetZRC20, outputAmount - gasFee);\n            _handleBTCEvent(address(0), zrc20, targetZRC20, amount, outputAmount - gasFee, platformFeesForTx);\n        }else{\n             uint256 amountAfterGasFees = _swapAndSendERC20Tokens(\n                targetZRC20,\n                gasZRC20,\n                gasFee,\n                recipientAddressBech32,\n                outputAmount,\n                zrc20,\n                isV3Swap\n            );\n\n            _handleBTCEvent(address(0), zrc20, targetZRC20, amount, amountAfterGasFees, platformFeesForTx);\n        }\n    }\n\n    function _handleBTCEvent(\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 outputAmount,\n        uint256 platformFeesForTx\n    ) private {\n        emit EddyCrossChainSwap(zrc20, targetZRC20, amount, outputAmount, evmWalletAddress, platformFeesForTx);\n    }\n\n    /**\n     * @notice Function to calculate amount out min for univ2\n     * @param zrc20 ZRC20 address\n     * @param targetZRC20 Target ZRC20 address \n     * @param swapAmount Swap amount\n     */\n    function getMinimumAmountUniv2(\n        address zrc20,\n        address targetZRC20, \n        uint256 swapAmount\n    ) private view returns (uint256 amountOutMin) {\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsOut(\n            UniswapFactory,\n            swapAmount,\n            getPathForTokens(zrc20, targetZRC20)\n        );\n        \n        amountOutMin = (amountsQuote[amountsQuote.length - 1]) - (slippage * amountsQuote[amountsQuote.length - 1]) / 1000;\n    }\n\n    /**\n     * @notice Function to calculate amount out min\n     * @param zrc20 ZRC20 address\n     * @param tokenToUse Token to use\n     * @param swapAmount Swap amount\n     * @param isV3Swap Swap using v3 or v2\n     * @return amountOutMin Amount out min\n     */\n    function calculateAmountOutMin(\n        address zrc20,\n        address tokenToUse, \n        uint256 swapAmount,\n        bool isV3Swap\n    ) private returns (uint256 amountOutMin) {\n        if(isV3Swap){\n            amountOutMin = getMinimumAmountUniv3(zrc20, tokenToUse, swapAmount);\n        }else{\n            amountOutMin = getMinimumAmountUniv2(zrc20, tokenToUse, swapAmount);\n        }\n    }\n\n    /**\n     * @notice Function to get minimum amount for univ3\n     * @param zrc20 ZRC20 address\n     * @param targetZRC20 Target ZRC20 address\n     * @param amount Amount\n     * @return amountOutMin Amount out min\n     */\n    function getMinimumAmountUniv3(\n        address zrc20,\n        address targetZRC20,\n        uint256 amount\n    ) internal returns(uint256 amountOutMin){\n        bytes memory path;\n        if(targetZRC20 == USDC_ETH){\n            path = abi.encodePacked(zrc20,feeTierToToken[zrc20], targetZRC20);\n        }else if(zrc20 == USDC_ETH){\n            path = abi.encodePacked(zrc20,feeTierToToken[targetZRC20], targetZRC20);\n        }else{\n            path = abi.encodePacked(zrc20,feeTierToToken[zrc20],USDC_ETH,feeTierToToken[targetZRC20], targetZRC20);\n        }\n\n        (uint256 amountOut, , , ) = IQuoterV2(address(QUOTER_V2)).quoteExactInput(path, amount);\n\n        amountOutMin = amountOut  - (slippage * amountOut) / 1000;\n    }\n\n    function handleFeeTransfer(bytes32[] memory merkleProof, address sender,address zrc20,uint256 amount, bool btcToSolana) private returns (uint256 platformFeesForTx) {\n        if(btcToSolana){\n            platformFeesForTx = (amount * feePercent) / 1000; // platformFee = 5 <> 0.5%\n            TransferHelper.safeTransfer(zrc20, EddyTreasurySafe,platformFeesForTx);\n        }else{\n            bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(sender))));\n            bool isWhitelisted = MerkleProof.verify(merkleProof, merkleRoot, leaf);\n            uint256 feeToApply = isWhitelisted ? customFee : feePercent;\n            platformFeesForTx = (amount * feeToApply) / 1000; // platformFee = 5 <> 0.5%\n            TransferHelper.safeTransfer(zrc20, EddyTreasurySafe,platformFeesForTx);\n        }\n        \n    }\n\n    function getEvmAddress(MessageContext calldata context, bytes calldata message, uint32 chainId) internal pure returns(address evmWalletAddress) {\n        if (chainId == BITCOIN_EDDY || chainId == SOLANA_EDDY) {\n            evmWalletAddress = context.sender;\n        } else {\n            evmWalletAddress = BytesHelperLib.bytesToAddress(message, 24);\n        }\n    }\n\n\n    function onCall(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        bytes calldata message\n    ) external override onlyGateway {\n        DecodedMessage memory decoded = context.chainID == BITCOIN ? decodeMessageBitcoin(message) : decodeMessage(message);\n        //Bool to check for solana btc case\n        bool btcToSolana = context.chainID == BITCOIN && decoded.destChainId == SOLANA_EDDY;\n        address evmWalletAddress;\n        if(!btcToSolana){\n            evmWalletAddress = getEvmAddress(context,message, decoded.destChainId);\n        }\n        // address evmWalletAddress = decoded.targetZRC20 == BTC_ZETH ? BytesHelperLib.bytesToAddress(context.origin, 0) : BytesHelperLib.bytesToAddress(message, 20);\n        uint256 platformFeesForTx = handleFeeTransfer(decoded.proof, evmWalletAddress, zrc20, amount, btcToSolana);\n        // TransferHelper.safeTransfer(zrc20, EddyTreasurySafe, platformFeesForTx);\n        address tokenToUse = decoded.isTargetZRC20 ? decoded.targetZRC20 : decoded.intermediateToken;\n        uint256 amountOutMin = calculateAmountOutMin(zrc20, tokenToUse, amount - platformFeesForTx, decoded.isV3Swap);\n        (address gasZRC20, uint256 gasFee) = decoded.isTargetZRC20 ? IZRC20(tokenToUse).withdrawGasFee() : IZRC20(tokenToUse).withdrawGasFeeWithGasLimit(gasLimit);\n        if(btcToSolana){\n            _handleBTCToSolanaCase(\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                amountOutMin,\n                platformFeesForTx,\n                message,\n                decoded.isV3Swap\n            );\n        }else if (decoded.destChainId == BITCOIN_EDDY && !btcToSolana) {\n            _handleBTCCase(\n                evmWalletAddress,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                amountOutMin,\n                platformFeesForTx,\n                message,\n                decoded.isV3Swap\n            );\n        } else if (decoded.destChainId == SOLANA_EDDY && !btcToSolana){\n            _handleSolanaCase(\n                evmWalletAddress,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                amountOutMin,\n                platformFeesForTx,\n                message,\n                decoded.isV3Swap\n            );\n        }else {\n            // bytes32 recipient = getRecipientOnly(message);\n            // address evmWalletAddress = BytesHelperLib.bytesToAddress(message, 20);\n            uint256 outputAmount = _swap(\n                zrc20,\n                amount - platformFeesForTx,\n                tokenToUse,\n                amountOutMin,\n                decoded.isV3Swap\n            );\n\n            if (gasZRC20 != tokenToUse) {\n                // target token not gas token\n                // withdraw token not gas token\n                HandleSwapAndSendTokensParams memory params;\n                params.targetZRC20 = decoded.targetZRC20;\n                params.gasZRC20CC = gasZRC20;\n                params.gasFeeCC = gasFee;\n                params.sender = evmWalletAddress;\n                params.targetAmount =  outputAmount;\n                params.inputToken = zrc20;\n                \n                uint256 amountsOutTarget = _swapAndSendERC20Tokens(\n                    params.targetZRC20,\n                    params.gasZRC20CC,\n                    params.gasFeeCC,\n                    abi.encodePacked(params.sender),\n                    params.targetAmount,\n                    params.inputToken,\n                    decoded.isV3Swap\n                );\n                emit EddyCrossChainSwap(zrc20,tokenToUse, amount, amountsOutTarget, evmWalletAddress, platformFeesForTx);\n              \n            } else if(gasZRC20 == tokenToUse && decoded.isTargetZRC20){\n                if (gasZRC20 != tokenToUse) revert WrongGasContract();\n                if (gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n                if(!IZRC20(decoded.targetZRC20).approve(address(gateway),outputAmount + gasFee)){\n                    revert ApprovalFailed();\n                }\n                withdraw(\n                    abi.encodePacked(evmWalletAddress),\n                    zrc20,\n                    decoded.targetZRC20,\n                    outputAmount - gasFee\n                );\n                \n                emit EddyCrossChainSwap(\n                    zrc20,\n                    decoded.targetZRC20,\n                    amount,\n                    outputAmount - gasFee,\n                    evmWalletAddress,\n                    platformFeesForTx\n                );\n            }else {\n                if (gasZRC20 != tokenToUse) revert WrongGasContract();\n                if (gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n                handleEvmWithdraw(\n                    decoded.contractAddress,\n                    zrc20,\n                    tokenToUse,\n                    decoded.targetZRC20,\n                    outputAmount,\n                    gasFee,\n                    evmWalletAddress\n                );\n\n                emit EddyCrossChainSwap(zrc20,decoded.targetZRC20, amount, outputAmount, evmWalletAddress, platformFeesForTx);\n            }\n\n        }\n    }\n\n    function bytesToBech32Bytes(\n        bytes calldata data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(42);\n        for (uint i = 0; i < 42; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n\n        return bech32Bytes;\n    }\n\n    /// @notice Withdraw the token\n    /// @param token The token to withdraw\n    /// @param receiver The receiver of the token\n    function withdrawToken(address token, address receiver) external onlyOwner {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        TransferHelper.safeTransfer(token, receiver, balance);\n    }\n\n    function onRevert(RevertContext calldata context) external onlyGateway {\n        (address senderEvmAddress, address zrc20) = abi.decode(context.revertMessage, (address, address));\n        (address gasZRC20, uint256 gasFee) = IZRC20(zrc20).withdrawGasFee();\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsOut(\n            UniswapFactory,\n            context.amount,\n            getPathForTokens(context.asset,zrc20)\n        );\n\n        uint amountOutMin = (amountsQuote[amountsQuote.length - 1]) - (slippage * amountsQuote[amountsQuote.length - 1]) / 1000;\n\n        // swap reverted token with input token\n        uint256 amountOut = _swap(\n            context.asset,\n            context.amount,\n            zrc20,\n            amountOutMin,\n            false\n        );\n\n        if(gasZRC20 == zrc20){\n            // Case where input token is gas token\n            if(!IZRC20(zrc20).approve(address(gateway),amountOut + gasFee)){\n                revert ApprovalFailed();\n            }\n\n            gateway.withdraw(\n                abi.encodePacked(senderEvmAddress),\n                amountOut - gasFee,\n                zrc20,\n                RevertOptions({\n                    revertAddress: senderEvmAddress,\n                    callOnRevert: false,\n                    abortAddress: address(0),\n                    revertMessage: \"\",\n                    onRevertGasLimit: gasLimit\n                })\n            );\n        }else{\n            //Case where input token is not gas token\n            _swapAndSendERC20Tokens(\n                zrc20,\n                gasZRC20,\n                gasFee,\n                abi.encodePacked(senderEvmAddress),\n                amountOut,\n                context.asset,\n                false\n            );\n        }   \n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n}"
    },
    "contracts/EddyGatewayTransferNative.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\nimport \"./libraries/BytesHelperLib.sol\";\nimport \"./libraries/SwapHelperLib.sol\";\nimport \"./libraries/UniswapV2Library.sol\";\nimport \"./interfaces/IWETH9.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\";\nimport {GatewayZEVM} from \"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\";\nimport \"./interfaces/IEddyStableSwap.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n \n\ncontract EddyGatewayTransferNative is UniversalContract,Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    using SwapHelperLib for address;\n    using BytesHelperLib for bytes;\n    address public constant BTC_ZETH = 0x13A0c5930C028511Dc02665E7285134B6d11A5f4;\n    address public constant WZETA = 0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf;\n    address public constant UniswapRouter = 0x2ca7d64A7EFE2D62A725E2B35Cf7230D6677FfEe;\n    address public constant UniswapFactory = 0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c;\n    address internal constant USDC_BSC = 0x05BA149A7bd6dC1F937fA9046A9e05C05f3b18b0;\n    address internal constant USDC_ETH = 0x0cbe0dF132a6c6B4a2974Fa1b7Fb953CF0Cc798a;\n    address internal constant USDT_ETH = 0x7c8dDa80bbBE1254a7aACf3219EBe1481c6E01d7;\n    address internal constant ULTI_ETH = 0xe573a6e11f8506620F123DBF930222163D46BCB6;\n    address internal constant ULTI_BSC = 0xD10932EB3616a937bd4a2652c87E9FeBbAce53e5;\n    address internal constant USDT_BSC = 0x91d4F0D54090Df2D81e834c3c8CE71C6c865e79F;\n    address internal constant FOUR_POOL = 0x448028804461e8e5a8877c228F3adFd58c3Da6B6;\n    address internal constant ULTI_STABLESWAP = 0x89cb3fA2A7910A268e9f7F619108aFADBD7587c4;\n    address private constant EddyTreasurySafe = 0xD8242f33A3CFf8542a3F71196eB2e63a26E6059F;\n    uint16 internal constant MAX_DEADLINE = 200;\n    mapping(address => uint256) public tokenToIndex;\n    GatewayZEVM public gateway;\n    uint256 public feePercent;\n    uint256 public slippage;\n    uint256 public gasLimit;\n\n    struct WithdrawParams {\n        bytes withdrawData;\n        uint256 amount;\n        address zrc20;\n        address targetZRC20;\n        uint256 amountOutMin;\n        address tokenToUse;\n        uint256 allowance;\n        uint256 platformFeesForTx;\n        address gasZRC20CC;\n        uint256 gasFeeCC;\n        uint256 amountsOut;\n        bytes32 recipient;\n        uint256 gasFee;\n    }\n\n    mapping(uint256 => address) public intermediateToken;\n    mapping(uint256 => address) public chainToGateway;\n\n    struct HandleSwapAndSendTokensParams {\n        address targetZRC20;\n        address gasZRC20CC;\n        uint256 gasFeeCC;\n        address sender;\n        uint256 targetAmount;\n        address inputToken;\n    }\n\n    struct DecodedMessage {\n        address targetZRC20;\n        bool isTargetZRC20;\n        address intermediateToken;\n        address contractAddress;\n    }\n\n    bytes32 public merkleRoot;\n    uint256 public customFee;\n\n\n    error ApprovalFailed();\n    error Unauthorized();\n    error IdenticalAddresses();\n    error ZeroAddress();\n    error WrongAmount();\n    error WrongGasContract();\n    error NotEnoughToPayGasFee();\n\n    modifier onlyGateway() {\n        if (msg.sender != address(gateway)) revert Unauthorized();\n        _;\n    }\n\n    event EddyCrossChainSwap(\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 outputAmount,\n        address walletAddress,\n        uint256 fees\n    );\n\n\n     /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initialize the contract\n     * @param gatewayAddress Gateway contract address\n     * @param _feePercent Fee percentage in basis points (e.g., 10 = 1%)\n     */\n\n    function initialize(\n        address payable gatewayAddress,\n        uint256 _feePercent,\n        uint256 _slippage,\n        uint256 _gasLimit\n    ) public initializer {\n        __Ownable_init(msg.sender);\n        __UUPSUpgradeable_init();\n        gateway = GatewayZEVM(gatewayAddress);\n        feePercent = _feePercent;\n        slippage = _slippage;\n        gasLimit = _gasLimit;\n    }\n\n    /**\n     * \n     * @param message bytes message\n     */\n\n    function _getRecipient(bytes calldata message) internal pure returns (bytes32 recipient) {\n        address recipientAddr = BytesHelperLib.bytesToAddress(message, 0);\n        recipient = BytesHelperLib.addressToBytes(recipientAddr);\n    }\n\n    function updateIndexForToken(address token, uint256 index) external onlyOwner {\n        tokenToIndex[token] = index;\n    }\n\n\n    function setOwner(address _owner) external onlyOwner {\n        transferOwnership(_owner);\n    }\n\n    /**\n     * \n     * @param data bytes data\n     * @param offset offset\n     */\n    function bytesToBech32Bytes(\n        bytes calldata data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(42);\n        for (uint i = 0; i < 42; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n\n        return bech32Bytes;\n    }\n\n\n    /**\n     * @notice Function to update slippage\n     * @param _slippage Slippage percentage in basis points (e.g., 10 = 1%)\n     */\n    function updateSlippage(uint256 _slippage) external onlyOwner {\n        slippage = _slippage;\n    }\n\n\n    /**\n     * Set new fee percentage only by owner\n     * @param _feePercent Fee percentage in basis points (e.g., 10 = 1%)\n     */\n    function setFeePercent(uint256 _feePercent) public onlyOwner {\n        feePercent = _feePercent;\n    }\n\n    /**\n     * Set merkle root only by owner\n     * @param _merkleRoot Merkle root\n     */\n    \n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * Set custom fee only by owner\n     * @param _customFee Custom fee\n     */\n\n    function setCustomFee(uint256 _customFee) external onlyOwner {\n        customFee = _customFee;\n    }\n\n    /**\n     * Set gas limit only by owner\n     * @param _gasLimit Gas limit\n     * @dev This is the gas limit for the call on revert\n     */\n    \n    function setGasLimit(uint256 _gasLimit) external onlyOwner {\n        gasLimit = _gasLimit;\n    }\n\n    /**\n     * Withdraw ZRC20 tokens using gateway\n     * @param _sender Sender address\n     * @param _inputToken Input token address\n     * @param _outputToken Output token address\n     * @param _amount Amount to withdraw\n     */\n    \n\n    function withdraw(\n        address _sender,\n        address _inputToken,\n        address _outputToken,\n        uint256 _amount\n    ) public {\n        gateway.withdraw(\n            abi.encodePacked(_sender),\n            _amount,\n            _outputToken,\n               RevertOptions({\n                    revertAddress: address(this),\n                    callOnRevert: true,\n                    abortAddress: address(0),\n                    revertMessage: abi.encode(_sender, _inputToken),\n                    onRevertGasLimit: gasLimit\n                })\n        );\n    }\n\n    /**\n     * Withdraw Bitcoin using gateway\n     * @param _sender Sender address\n     * @param _inputToken Input token address\n     * @param _outputToken Output token address\n     * @param _amount Amount to withdraw\n     */\n\n    function withdrawBitcoin(\n        bytes memory _sender,\n        address _inputToken,\n        address _outputToken,\n        uint256 _amount\n    ) public {\n        gateway.withdraw(\n            _sender,\n            _amount,\n            _outputToken,\n               RevertOptions({\n                    revertAddress: address(this),\n                    callOnRevert: true,\n                    abortAddress: address(0),\n                    revertMessage: abi.encode(_sender, _inputToken),\n                    onRevertGasLimit: gasLimit\n                })\n        );\n    }\n\n\n    /**\n     * Withdraw and call contract function on destination chain using gateway\n     * @param receiver Receiver address\n     * @param amount Amount to withdraw\n     * @param zrc20 ZRC20 token address\n     * @param message Message\n     * @param callOptions Call options\n     * @param revertOptions Revert options\n     */\n\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        bytes memory message,\n        CallOptions memory callOptions,\n        RevertOptions memory revertOptions\n    ) public {\n        gateway.withdrawAndCall(\n            receiver,\n            amount,\n            zrc20,\n            message,\n            callOptions,\n            revertOptions\n        );\n    }\n\n    /**\n     * Sort tokens\n     * @param tokenA Token A\n     * @param tokenB Token B\n     * @return token0 Token 0\n     */\n\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) revert IdenticalAddresses();\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (token0 == address(0)) revert ZeroAddress();\n    }\n\n    /**\n     * @notice Get Uniswap pair address for tokens\n     * @param factory Factory address\n     * @param tokenA First token\n     * @param tokenB Second Token\n     */\n\n     function uniswapv2PairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) public pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /**\n     * Get path for tokens\n     * @param zrc20 ZRC20 token\n     * @param targetZRC20 Target ZRC20 token\n     * @return path Path\n     */\n    function getPathForTokens(\n        address zrc20,\n        address targetZRC20\n    ) internal view returns(address[] memory path) {\n        bool existsPairPool = _existsPairPool(\n            UniswapFactory,\n            zrc20,\n            targetZRC20\n        );\n\n        if (existsPairPool) {\n            path = new address[](2);\n            path[0] = zrc20;\n            path[1] = targetZRC20;\n        } else {\n            path = new address[](3);\n            path[0] = zrc20;\n            path[1] = WZETA;\n            path[2] = targetZRC20;\n        }\n    }\n\n    /**\n     * Check if pair pool exists\n     * @param uniswapV2Factory Uniswap V2 factory\n     * @param zrc20A zrc20A\n     * @param zrc20B zrc20B\n     */\n    function _existsPairPool(\n        address uniswapV2Factory,\n        address zrc20A,\n        address zrc20B\n    ) internal view returns (bool) {\n        address uniswapPool = uniswapv2PairFor(\n            uniswapV2Factory,\n            zrc20A,\n            zrc20B\n        );\n        return\n            IZRC20(zrc20A).balanceOf(uniswapPool) > 0 &&\n            IZRC20(zrc20B).balanceOf(uniswapPool) > 0;\n    }\n\n    /**\n     * Calculate amount in max\n     * @param targetZRC20 Target ZRC20\n     * @param gasZRC20 Gas ZRC20\n     * @param gasFee Gas fee\n     * @return amountInMax Amount in max\n     */\n    function _calculateAmountInMax(\n        address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee\n    ) private view returns (uint256) {\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsIn(\n            UniswapFactory,\n            gasFee,\n            getPathForTokens(targetZRC20, gasZRC20)\n        );\n        return amountsQuote[0] + (slippage * amountsQuote[0]) / 1000;\n    }\n\n    /**\n     * Swap and send ERC20 tokens\n     * @param targetZRC20 Target ZRC20\n     * @param gasZRC20 Gas ZRC20\n     * @param gasFee Gas fee\n     * @param recepient Receipient\n     * @param targetAmount Target amount\n     * @param inputToken Input token\n     * @return amountsOut Amounts out\n     */\n  function _swapAndSendERC20Tokens(\n        address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee,\n        address recepient,\n        uint256 targetAmount,\n        address inputToken\n    ) internal returns(uint256 amountsOut) {\n\n        // Get amountOut for Input gasToken\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsIn(\n            UniswapFactory,\n            gasFee,\n            getPathForTokens(targetZRC20, gasZRC20) // [gasAmount ,zetaAmount,usdcAmount] USDC.BSC -> target , gas ->BNB.BNB\n        );\n\n        uint amountInMax = (amountsQuote[0]) + (slippage * amountsQuote[0]) / 1000;\n\n        // Give approval to uniswap\n        IZRC20(targetZRC20).approve(UniswapRouter, amountInMax);\n        require(IZRC20(targetZRC20).allowance(address(this), UniswapRouter) >= amountInMax, \"INSUFFICIENT_ALLOWANCE IN _swapAndSendERC20Tokens\");\n\n        // Swap gasFees for targetZRC20\n        // Revert possibility\n        uint[] memory amounts = IUniswapV2Router01(UniswapRouter)\n            .swapTokensForExactTokens(\n                gasFee, // Amount of gas token required\n                amountInMax,\n                getPathForTokens(targetZRC20, gasZRC20), //path[0] = targetZRC20, path[1] = gasZRC20\n                address(this),\n                block.timestamp + MAX_DEADLINE\n        );\n       \n        require(IZRC20(gasZRC20).balanceOf(address(this)) >= gasFee, \"INSUFFICIENT_GAS_FOR_WITHDRAW\");\n\n        require(targetAmount - amountInMax > 0, \"INSUFFICIENT_AMOUNT_FOR_WITHDRAW\");\n\n        // Gateway changes\n        if (!IZRC20(gasZRC20).approve(address(gateway), gasFee)) {\n            revert ApprovalFailed();\n        }\n        \n        if (!IZRC20(targetZRC20).approve(address(gateway), targetAmount - amounts[0])) {\n            revert ApprovalFailed();\n        }\n\n        // Withdraw gasFees     \n        withdraw(recepient,inputToken, targetZRC20, targetAmount- amounts[0]);\n\n        amountsOut = targetAmount - amountInMax;\n        \n    }\n\n    /**\n     * @notice Function to swap tokens\n     * @param _zrc20 ZRC20 token\n     * @param _amount Amount\n     * @param _targetZRC20 Target ZRC20 token\n     * @param _minAmountOut Minimum amount out\n     */\n    function _swap(\n        address _zrc20,//USDT.ETH\n        uint256 _amount,\n        address _targetZRC20, // USDC.BSC\n        uint256 _minAmountOut\n    ) internal returns (uint256 outputAmount){\n         if((_zrc20 == USDC_BSC || _zrc20 == USDC_ETH || _zrc20 == USDT_ETH || _zrc20 == USDT_BSC) && (_targetZRC20 == USDC_BSC || _targetZRC20 == USDC_ETH || _targetZRC20 == USDT_ETH || _targetZRC20 == USDT_BSC)){\n             IZRC20(_zrc20).approve(FOUR_POOL, _amount);\n             outputAmount = IEddyStableSwap(FOUR_POOL).exchange(tokenToIndex[_zrc20],tokenToIndex[_targetZRC20], _amount, _minAmountOut);    \n        }else if((_zrc20 == ULTI_ETH || _zrc20 == ULTI_BSC) && (_targetZRC20 == ULTI_ETH || _targetZRC20 == ULTI_BSC)){\n             IZRC20(_zrc20).approve(ULTI_STABLESWAP, _amount);\n             outputAmount = IEddyStableSwap(ULTI_STABLESWAP).exchange(tokenToIndex[_zrc20],tokenToIndex[_targetZRC20], _amount, _minAmountOut);\n        }else{\n            outputAmount = SwapHelperLib._doSwap(\n                WZETA,\n                UniswapFactory,\n                UniswapRouter,\n                _zrc20,\n                _amount,\n                _targetZRC20,\n                _minAmountOut\n            );\n        }\n\n    }\n\n\n    /**\n     * Handle fee transfer\n     * @param merkleProof Merkle proof\n     * @param sender Sender\n     * @param isNative Is native\n     * @param zrc20 ZRC20 token\n     * @param amount Amount\n     * @return platformFeesForTx Platform fees for transaction\n     */\n    \n    function handleFeeTransfer(bytes32[] memory merkleProof, address sender,bool isNative,address zrc20,uint256 amount) private returns (uint256 platformFeesForTx) {\n        bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(sender))));\n        bool isWhitelisted = MerkleProof.verify(merkleProof, merkleRoot, leaf);\n        uint256 feeToApply = isWhitelisted ? customFee : feePercent;\n        platformFeesForTx = (amount * feeToApply) / 1000; // platformFee = 5 <> 0.5%\n        if(isNative){\n            (bool sent, ) = payable(EddyTreasurySafe).call{value: platformFeesForTx}(\"\");\n            require(sent, \"Failed to transfer zeta to treasury\");\n        }else{\n            TransferHelper.safeTransfer(zrc20, EddyTreasurySafe,platformFeesForTx);\n        }\n    }\n    \n    \n    function decodeMessage(bytes calldata message) public pure returns (DecodedMessage memory) {\n        // First check basic length for required fields (target + bool)\n        require(message.length >= 52, \"Invalid message length\"); // 20+ 32 bytes minimum\n    \n        // First decode the target and bool\n        address targetZRC20 = BytesHelperLib.bytesToAddress(message, 0);\n        bool isTargetZRC20 = abi.decode(message[20:52], (bool));\n\n\n        // Initialize additional addresses to zero address\n        address intermediate = address(0);  \n        address contractAddress = address(0); \n    \n        // Only decode additional addresses if isTargetZRC20 is FALSE and they are provided\n        if (!isTargetZRC20 && message.length >= 92) {\n            intermediate = BytesHelperLib.bytesToAddress(message, 52);\n            contractAddress = BytesHelperLib.bytesToAddress(message,72);\n        }\n\n        return DecodedMessage({\n            targetZRC20: targetZRC20,\n            isTargetZRC20: isTargetZRC20,\n            intermediateToken: intermediate,\n            contractAddress: contractAddress\n        });\n        \n    }\n\n    /**\n     * Transfer Zeta to connected chain\n     * @param withdrawData Withdraw data\n     * @param zrc20 ZRC20 token\n     * @param amountOutMin Amount out min\n     * @param merkleProof Merkle proof\n     */\n    \n   function transferZetaToConnectedChain(\n        bytes calldata withdrawData,\n        address zrc20, // Pass WZETA address here\n        uint256 amountOutMin,\n        bytes32[] calldata merkleProof\n    ) external payable {\n        // Store fee in aZeta\n        uint256 platformFeesForTx = handleFeeTransfer(merkleProof, msg.sender,true,zrc20,msg.value);\n\n        IWETH9(WZETA).deposit{value: msg.value - platformFeesForTx}();\n\n        DecodedMessage memory decoded = decodeMessage(withdrawData);\n\n        address tokenToUse = decoded.isTargetZRC20 ? decoded.targetZRC20 : decoded.intermediateToken;\n\n        uint256 outputAmount = _swap(\n            zrc20,\n            msg.value - platformFeesForTx,\n            tokenToUse,\n            amountOutMin\n        );\n       \n\n        (address gasZRC20CC, uint256 gasFeeCC) = decoded.isTargetZRC20 ? IZRC20(tokenToUse).withdrawGasFee() : IZRC20(tokenToUse).withdrawGasFeeWithGasLimit(gasLimit);\n\n        if (decoded.targetZRC20 == BTC_ZETH && decoded.isTargetZRC20) {\n            bytes memory recipientAddressBech32 = bytesToBech32Bytes(withdrawData, 52);\n            if (outputAmount < gasFeeCC) revert WrongAmount();\n\n            if(!IZRC20(tokenToUse).approve(address(gateway), outputAmount + gasFeeCC)){\n                revert ApprovalFailed();\n            }\n\n            withdrawBitcoin(\n                recipientAddressBech32,\n                zrc20,\n                tokenToUse,\n                outputAmount - gasFeeCC\n            );\n\n            emit EddyCrossChainSwap(\n                zrc20,\n                tokenToUse,\n                msg.value,\n                outputAmount - gasFeeCC,\n                msg.sender,\n                platformFeesForTx\n            );\n        } else if (gasZRC20CC != tokenToUse) {\n            // Target token is not gas token\n            // Swap tokenIn for gasFees\n            // bytes32 recipient = BytesHelperLib.addressToBytes(msg.sender);\n            HandleSwapAndSendTokensParams memory params;\n\n            params.targetZRC20 = tokenToUse;\n            params.gasZRC20CC = gasZRC20CC;\n            params.gasFeeCC = gasFeeCC;\n            params.sender = msg.sender;\n            params.targetAmount =  outputAmount;\n            params.inputToken = zrc20;\n\n            uint256 amountsOut = _swapAndSendERC20Tokens(\n                params.targetZRC20,\n                params.gasZRC20CC,\n                params.gasFeeCC,\n                params.sender,\n                params.targetAmount,\n                params.inputToken \n            );\n\n            emit EddyCrossChainSwap(\n                zrc20,\n                tokenToUse,\n                msg.value,\n                amountsOut,\n                msg.sender,\n                platformFeesForTx\n            );\n\n        }else if(decoded.isTargetZRC20 && gasZRC20CC == decoded.targetZRC20){\n            \n            if (gasZRC20CC != tokenToUse) revert WrongGasContract();\n            \n            if (gasFeeCC >= outputAmount) revert NotEnoughToPayGasFee();\n\n            if(!IZRC20(decoded.targetZRC20).approve(address(gateway),outputAmount + gasFeeCC)){\n                revert ApprovalFailed();\n            }\n\n            withdraw(\n                msg.sender,\n                zrc20,\n                decoded.targetZRC20,\n                outputAmount - gasFeeCC\n            );\n            \n            emit EddyCrossChainSwap(\n                zrc20,\n                decoded.targetZRC20,\n                msg.value,\n                outputAmount - gasFeeCC,\n                msg.sender,\n                platformFeesForTx\n            );\n\n        }else {\n            // EVM withdraw\n            // bytes32 recipient = BytesHelperLib.addressToBytes(msg.sender);\n            // Change withdraw in gateway\n            // (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20)\n            // .withdrawGasFee();\n            \n            if (gasZRC20CC != tokenToUse) revert WrongGasContract();\n            \n            if (gasFeeCC >= outputAmount) revert NotEnoughToPayGasFee();\n            \n            handleEvmWithdraw(\n                decoded.contractAddress,\n                zrc20,\n                tokenToUse,\n                decoded.targetZRC20,\n                outputAmount,\n                gasFeeCC\n            );\n            \n            emit EddyCrossChainSwap(\n                zrc20,\n                decoded.targetZRC20,\n                msg.value,\n                outputAmount - gasFeeCC,\n                msg.sender,\n                platformFeesForTx\n            );\n        }\n\n\n    }\n\n\n    /**\n     * Handler function to prepare data for withdraw and call\n     * @param contractAddress Contract address\n     * @param zrc20 ZRC20 token\n     * @param tokenToUse Token to use\n     * @param targetZRC20 Target ZRC20\n     * @param outputAmount Output amount\n     * @param gasFeeCC Gas fee\n     */\n\n    function handleEvmWithdraw(\n        address contractAddress,\n        address zrc20,\n        address tokenToUse,\n        address targetZRC20,\n        uint256 outputAmount,\n        uint256 gasFeeCC\n    ) private {\n\n        require(contractAddress != address(0), \"ZERO_ADDRESS\");\n\n        require(tokenToUse != address(0), \"ZERO_ADDRESS\");\n\n        if (!IZRC20(tokenToUse).approve(address(gateway), outputAmount + gasFeeCC)) {\n            revert ApprovalFailed();\n        }\n\n        string memory functionSignature = \"swapETHtoERC20(uint256,address,address)\";\n        \n        // Calculate the function selector\n        bytes4 selector = bytes4(keccak256(bytes(functionSignature)));\n\n         withdrawAndCall(\n            abi.encodePacked(contractAddress),\n            outputAmount - gasFeeCC,\n            tokenToUse,\n            abi.encodeWithSelector(selector,outputAmount - gasFeeCC,targetZRC20,msg.sender),\n            CallOptions({\n                isArbitraryCall: true,\n                gasLimit: gasLimit\n            }),\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(msg.sender, zrc20),\n                onRevertGasLimit: gasLimit\n            })\n        );\n    }\n\n    /**\n     * Withdraw to native chain\n     * @param withdrawData Withdraw data\n     * @param amount Amount\n     * @param zrc20 ZRC20 token\n     * @param amountOutMin Amount out min\n     * @param merkleProof Merkle proof\n     */\n    function withdrawToNativeChain(\n        bytes calldata withdrawData, \n        uint256 amount,\n        address zrc20,\n        uint256 amountOutMin,\n        bytes32[] calldata merkleProof\n    ) external {\n        DecodedMessage memory decoded = decodeMessage(withdrawData);\n        WithdrawParams memory params;\n        params.withdrawData = withdrawData;\n        params.amount = amount;\n        params.zrc20 = zrc20;\n        params.targetZRC20 = decoded.targetZRC20;\n        params.amountOutMin = amountOutMin;\n        params.tokenToUse = decoded.isTargetZRC20 ? (decoded.targetZRC20 == zrc20) ? zrc20 : decoded.targetZRC20 : decoded.intermediateToken;\n        // check for approval\n        params.allowance = IZRC20(zrc20).allowance(msg.sender, address(this));\n        require(params.allowance > amount, \"Not enough allowance of ZRC20 token\");\n        require(IZRC20(zrc20).transferFrom(msg.sender, address(this), amount), \"INSUFFICIENT ALLOWANCE: TRANSFER FROM FAILED\");\n        params.platformFeesForTx = handleFeeTransfer(merkleProof,msg.sender,false,zrc20,amount); // platformFee = 5 <> 0.5%\n        // TransferHelper.safeTransfer(zrc20, EddyTreasurySafe, params.platformFeesForTx);\n       (params.gasZRC20CC, params.gasFeeCC) = decoded.isTargetZRC20 ? IZRC20(params.tokenToUse).withdrawGasFee() : IZRC20(params.tokenToUse).withdrawGasFeeWithGasLimit(gasLimit);\n        if (decoded.targetZRC20 != zrc20) {\n            params.amountsOut = _swap(\n                zrc20,\n                amount - params.platformFeesForTx,\n                params.tokenToUse,\n                amountOutMin\n            ); //USDC.BSC - amtoutx\n            if (decoded.targetZRC20 == BTC_ZETH) {\n                bytes memory recipientAddressBech32 = bytesToBech32Bytes(withdrawData,52);\n                (, params.gasFee) = IZRC20(params.tokenToUse).withdrawGasFee();\n                if (params.amountsOut < params.gasFee) revert WrongAmount();\n                if(!IZRC20(decoded.targetZRC20).approve(address(gateway), params.amountsOut + params.gasFee)){\n                    revert ApprovalFailed();\n                }\n                withdrawBitcoin(recipientAddressBech32, zrc20, decoded.targetZRC20, params.amountsOut - params.gasFee);\n                emit EddyCrossChainSwap(zrc20, decoded.targetZRC20, amount, params.amountsOut - params.gasFee, msg.sender, params.platformFeesForTx);\n            } else if (params.gasZRC20CC != params.tokenToUse) {\n                uint256 tokenAmountsOut = _swapAndSendERC20Tokens(\n                    decoded.targetZRC20,\n                    params.gasZRC20CC,\n                    params.gasFeeCC,\n                    msg.sender,\n                    params.amountsOut,\n                    zrc20\n                );\n                emit EddyCrossChainSwap(zrc20, decoded.targetZRC20, amount, tokenAmountsOut, msg.sender, params.platformFeesForTx);\n            } else if(params.gasZRC20CC == params.tokenToUse && decoded.isTargetZRC20){ {\n                if (params.gasZRC20CC != params.tokenToUse) revert WrongGasContract();\n                \n                if (params.gasFeeCC >= params.amountsOut) revert NotEnoughToPayGasFee();\n                \n                if(!IZRC20(params.tokenToUse).approve(address(gateway),params.amountsOut + params.gasFeeCC)){\n                    revert ApprovalFailed();\n                }\n                \n                withdraw(\n                    msg.sender,\n                    zrc20,\n                    params.tokenToUse,\n                    params.amountsOut - params.gasFeeCC\n                );\n                \n                emit EddyCrossChainSwap(zrc20,decoded.targetZRC20, amount, params.amountsOut - params.gasFeeCC, msg.sender, params.platformFeesForTx);\n            }}else {\n                if (params.gasZRC20CC != params.tokenToUse) revert WrongGasContract();\n                \n                if (params.gasFeeCC >= params.amountsOut) revert NotEnoughToPayGasFee();\n\n\n                handleEvmWithdraw(\n                    decoded.contractAddress,\n                    zrc20,\n                    params.tokenToUse,\n                    decoded.targetZRC20,\n                    params.amountsOut,\n                    params.gasFeeCC\n                );\n                emit EddyCrossChainSwap(zrc20,decoded.targetZRC20, amount, params.amountsOut - params.gasFeeCC, msg.sender, params.platformFeesForTx);\n            }\n        } else {\n            if (decoded.targetZRC20 == BTC_ZETH) {\n                bytes memory recipientAddressBech32 = bytesToBech32Bytes(withdrawData,52);\n                (, params.gasFee) = IZRC20(params.tokenToUse).withdrawGasFee();\n                if (amount - params.platformFeesForTx < params.gasFee) revert WrongAmount();\n                if(!IZRC20(decoded.targetZRC20).approve(address(gateway), amount - params.platformFeesForTx + params.gasFee)){\n                    revert ApprovalFailed();\n                }\n                withdrawBitcoin(recipientAddressBech32, zrc20, decoded.targetZRC20, amount - params.platformFeesForTx - params.gasFee);\n                emit EddyCrossChainSwap(zrc20, decoded.targetZRC20, amount, amount - params.platformFeesForTx - params.gasFee, msg.sender, params.platformFeesForTx);\n            } else if (params.gasZRC20CC != decoded.targetZRC20) {\n                uint256 amountsOut = _swapAndSendERC20Tokens(\n                    decoded.targetZRC20,\n                    params.gasZRC20CC,\n                    params.gasFeeCC,\n                    msg.sender,\n                    amount - params.platformFeesForTx,\n                    zrc20\n                );\n                emit EddyCrossChainSwap(zrc20,decoded.targetZRC20, amount, amountsOut, msg.sender, params.platformFeesForTx);\n             } else {\n                if (params.gasZRC20CC != params.tokenToUse) revert WrongGasContract();\n                \n                if (params.gasFeeCC >= amount - params.platformFeesForTx) revert NotEnoughToPayGasFee();\n                \n                if(!IZRC20(params.tokenToUse).approve(address(gateway),amount - params.platformFeesForTx + params.gasFeeCC)){\n                    revert ApprovalFailed();\n                }\n                \n                withdraw(\n                    msg.sender,\n                    zrc20,\n                    params.tokenToUse,\n                    params.amountsOut - params.gasFeeCC\n                );\n                emit EddyCrossChainSwap(zrc20, decoded.targetZRC20, amount, amount - params.platformFeesForTx - params.gasFeeCC, msg.sender, params.platformFeesForTx);\n            }\n        }\n    }\n\n\n    function _authorizeUpgrade(address) internal override onlyOwner {}\n\n    /**\n     * Decode merkle proof from message\n     * @param message Message\n     * @return sender Sender\n     * @return targetToken Target token\n     * @return proof Proof\n     */\n    function decodeMerkleMessage(bytes calldata message) internal pure returns (\n        address sender,\n        address targetToken,\n        bytes32[] memory proof\n    ) {\n        require(message.length >= 40, \"Message too short\");\n        \n        // First 20 bytes are the sender address\n        sender = BytesHelperLib.bytesToAddress(message, 0);\n        \n        // Next 20 bytes are the target token address\n        targetToken = BytesHelperLib.bytesToAddress(message, 20);\n        \n        // Skip the two addresses (40 bytes) to get to the encoded proof\n        uint256 proofStart = 40;\n\n        if(message.length < proofStart + 32) {\n            proof = new bytes32[](0);\n            return (sender, targetToken, proof);\n        }\n        \n        // Get the offset of the array data\n        uint256 arrayOffset;\n        assembly {\n            arrayOffset := calldataload(add(message.offset, proofStart))\n        }\n        \n        // Read array length\n        uint256 proofLength;\n        assembly {\n            let lengthPosition := add(add(message.offset, proofStart), arrayOffset)\n            proofLength := calldataload(lengthPosition)\n        }\n        \n        // Initialize proof array\n        proof = new bytes32[](proofLength);\n        \n        // Read proof elements starting after the length\n        uint256 elementsStart = proofStart + arrayOffset + 32;\n        \n        for(uint256 i = 0; i < proofLength; i++) {\n            assembly {\n                let elementPosition := add(add(message.offset, elementsStart), mul(i, 32))\n                mstore(add(proof, add(32, mul(i, 32))), calldataload(elementPosition))\n            }\n        }\n        \n        return (sender, targetToken, proof);\n    }\n\n    /**\n     * @notice Function called by the gateway to execute the cross-chain swap\n     * @param context Message context\n     * @param zrc20 ZRC20 token address\n     * @param amount Amount\n     * @param message Message\n     * @dev Only the gateway can call this function\n     */\n    function onCall(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        bytes calldata message\n    ) external override onlyGateway {\n \n        (address senderEvmAddress, address targetZRC20,bytes32[] memory proof) = decodeMerkleMessage(message);\n        // address senderEvmAddress = BytesHelperLib.bytesToAddress(message, 0)\n        // address targetZRC20 = BytesHelperLib.bytesToAddress(message, 20);\n\n        // Fee for platform\n        uint256 platformFeesForTx = handleFeeTransfer(proof,senderEvmAddress,false,zrc20,amount); // platformFee = 5 <> 0.5%\n        // TransferHelper.safeTransfer(zrc20, EddyTreasurySafe, platformFeesForTx);\n        if (targetZRC20 == zrc20) {\n            // same token\n            TransferHelper.safeTransfer(targetZRC20, senderEvmAddress, amount - platformFeesForTx);\n        } else {\n            uint256 amountOutMin;\n            uint[] memory amountsQuote = UniswapV2Library.getAmountsOut(\n                UniswapFactory,\n                amount - platformFeesForTx,\n                getPathForTokens(zrc20, targetZRC20)\n            );\n            amountOutMin = (amountsQuote[amountsQuote.length - 1]) - (slippage * amountsQuote[amountsQuote.length - 1]) / 1000;\n       \n            // swap\n            uint256 outputAmount = _swap(\n                zrc20,\n                amount - platformFeesForTx,\n                targetZRC20,\n                amountOutMin\n            );\n\n            if (targetZRC20 == WZETA) {\n                // withdraw WZETA to get Zeta in 1:1 ratio\n               IWETH9(WZETA).withdraw(outputAmount);\n                // transfer wzeta\n                payable(senderEvmAddress).transfer(outputAmount);\n            } else {\n                TransferHelper.safeTransfer(targetZRC20, senderEvmAddress, outputAmount);\n            }\n        }\n\n        emit EddyCrossChainSwap(zrc20, targetZRC20, amount, amount - platformFeesForTx, senderEvmAddress, platformFeesForTx);       \n    }\n   \n\n    /**\n     * @notice Function called by the gateway to revert the cross-chain swap\n     * @param context Revert context\n     * @dev Only the gateway can call this function\n     */\n    function onRevert(RevertContext calldata context) external onlyGateway {\n        (address senderEvmAddress, address zrc20) = abi.decode(context.revertMessage, (address, address));\n         uint[] memory amountsQuote = UniswapV2Library.getAmountsOut(\n                UniswapFactory,\n                context.amount,\n                getPathForTokens(context.asset,zrc20)\n            );\n\n        uint amountOutMin = (amountsQuote[amountsQuote.length - 1]) - (slippage * amountsQuote[amountsQuote.length - 1]) / 1000;\n\n        uint256 amountOut = _swap(\n            context.asset,\n            context.amount,\n            zrc20,\n            amountOutMin\n        );\n        \n        TransferHelper.safeTransfer(zrc20,senderEvmAddress,amountOut);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}   "
    },
    "contracts/GatewayCrossChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {GatewayZEVM} from \"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\";\nimport {IZRC20} from \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IZRC20.sol\";\nimport {UniversalContract} from \"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {UniswapV2Library} from \"./libraries/UniswapV2Library.sol\";\nimport {TransferHelper} from \"./libraries/TransferHelper.sol\";\nimport {BytesHelperLib} from \"./libraries/BytesHelperLib.sol\";\nimport {IDODORouteProxy} from \"./interfaces/IDODORouteProxy.sol\";\n\ncontract GatewayCrossChain is UniversalContract, Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    address public constant WZETA = 0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf;\n    address public constant UniswapRouter = 0x2ca7d64A7EFE2D62A725E2B35Cf7230D6677FfEe;\n    address public constant UniswapFactory = 0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c;\n    uint32 constant BITCOIN_EDDY = 8332; // chain Id from eddy db\n    uint32 constant SOLANA_EDDY = 900; // chain Id from eddy db\n    uint256 constant ZETACHAIN = 7000;\n    uint256 constant MAX_DEADLINE = 200;\n    address private EddyTreasurySafe;\n    address public DODORouteProxy;\n    address public DODOApprove;\n    uint256 public feePercent;\n    uint256 public slippage;\n    uint256 public gasLimit;\n\n    GatewayZEVM public gateway;\n\n    struct DecodedMessage {\n        address targetZRC20;\n        uint32 destChainId;\n        bytes swapData;\n        bytes contractAddress; // empty for withdraw, non-empty for withdrawAndCall\n        bytes crossChainSwapData;\n    }\n\n    error Unauthorized();\n    error RouteProxyCallFailed();\n    error NotEnoughToPayGasFee();\n    error IdenticalAddresses();\n    error ZeroAddress();\n\n    event EddyCrossChainSwapRevert(\n        bytes32 externalId,\n        address token,\n        uint256 amount,\n        address walletAddress\n    );\n    event EddyCrossChainSwap(\n        bytes32 externalId,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 outputAmount,\n        address walletAddress,\n        uint256 fees\n    );\n    event GatewayUpdated(address gateway);\n    event FeePercentUpdated(uint256 feePercent);\n    event DODORouteProxyUpdated(address dodoRouteProxy);\n    event EddyTreasurySafeUpdated(address EddyTreasurySafe);\n    \n    modifier onlyGateway() {\n        if (msg.sender != address(gateway)) revert Unauthorized();\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n        /**\n     * @dev Initialize the contract\n     * @param _gateway Gateway contract address\n     * @param _EddyTreasurySafe Address of the platform fee wallets\n     * @param _dodoRouteProxy Address of the DODORouteProxy\n     * @param _feePercent Platform fee percentage in basis points (e.g., 10 = 1%)\n     */\n    function initialize(\n        address payable _gateway,\n        address _EddyTreasurySafe,\n        address _dodoRouteProxy,\n        uint256 _feePercent,\n        uint256 _slippage,\n        uint256 _gasLimit\n    ) public initializer {\n        __Ownable_init(msg.sender);\n        __UUPSUpgradeable_init();\n        gateway = GatewayZEVM(_gateway);\n        EddyTreasurySafe = _EddyTreasurySafe;\n        DODORouteProxy = _dodoRouteProxy;\n        DODOApprove = IDODORouteProxy(_dodoRouteProxy)._DODO_APPROVE_PROXY_();\n        feePercent = _feePercent;\n        slippage = _slippage;\n        gasLimit = _gasLimit;\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        transferOwnership(_owner);\n    }\n\n    function setDODORouteProxy(address _dodoRouteProxy) external onlyOwner {\n        DODORouteProxy = _dodoRouteProxy;\n        emit DODORouteProxyUpdated(_dodoRouteProxy);\n    }\n\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\n        feePercent = _feePercent;\n        emit FeePercentUpdated(_feePercent);\n    }\n\n    function setGateway(address payable _gateway) external onlyOwner {\n        gateway = GatewayZEVM(_gateway);\n        emit GatewayUpdated(_gateway);\n    }\n\n    function setEddyTreasurySafe(address _EddyTreasurySafe) external onlyOwner {\n        EddyTreasurySafe = _EddyTreasurySafe;\n        emit EddyTreasurySafeUpdated(_EddyTreasurySafe);\n    }\n\n    // ============== Uniswap Helper ================ \n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) revert IdenticalAddresses();\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (token0 == address(0)) revert ZeroAddress();\n    }\n\n    function uniswapv2PairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) public pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n     function _existsPairPool(\n        address uniswapV2Factory,\n        address zrc20A,\n        address zrc20B\n    ) internal view returns (bool) {\n        address uniswapPool = uniswapv2PairFor(\n            uniswapV2Factory,\n            zrc20A,\n            zrc20B\n        );\n        return\n            IZRC20(zrc20A).balanceOf(uniswapPool) > 0 &&\n            IZRC20(zrc20B).balanceOf(uniswapPool) > 0;\n    }\n\n    function getPathForTokens(\n        address zrc20,\n        address targetZRC20\n    ) internal view returns(address[] memory path) {\n        bool existsPairPool = _existsPairPool(\n            UniswapFactory,\n            zrc20,\n            targetZRC20\n        );\n\n        if (existsPairPool) {\n            path = new address[](2);\n            path[0] = zrc20;\n            path[1] = targetZRC20;\n        } else {\n            path = new address[](3);\n            path[0] = zrc20;\n            path[1] = WZETA;\n            path[2] = targetZRC20;\n        }\n    }\n\n    /**\n     * @notice Function to decode solana wallet address\n     * @param data Data \n     * @param offset Offset\n     */\n    function bytesToSolana(\n        bytes memory data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(32);\n        for (uint i = 0; i < 32; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n        return bech32Bytes;\n    }\n\n    function bytesToBTC(\n        bytes memory data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(42);\n        for (uint i = 0; i < 42; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n        return bech32Bytes;\n    }\n\n    function getEvmAddress(\n        MessageContext calldata context,\n        bytes calldata message, \n        uint32 chainId\n    ) internal pure returns (address evmWalletAddress) {\n        if (chainId == BITCOIN_EDDY || chainId == SOLANA_EDDY) {\n            evmWalletAddress = context.sender;\n        } else {\n            evmWalletAddress = BytesHelperLib.bytesToAddress(message, 24);\n        }\n    }\n\n    function withdrawAndCall(\n        bytes32 externalId,\n        bytes memory contractAddress,\n        address targetZRC20,\n        uint256 outputAmount,\n        address evmWalletAddress,\n        bytes memory swapData\n    ) public {\n        bytes memory message = abi.encode(externalId, evmWalletAddress, outputAmount, swapData);\n        gateway.withdrawAndCall(\n            contractAddress,\n            outputAmount,\n            targetZRC20,\n            message,\n            CallOptions({\n                isArbitraryCall: false,\n                gasLimit: gasLimit\n            }),\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(externalId, targetZRC20, outputAmount, evmWalletAddress),\n                onRevertGasLimit: gasLimit\n            })\n        );\n    }\n\n    /**\n     * @notice - Function to withdraw using gateway\n     * @param sender Sender address\n     * @param outputToken output token address\n     * @param amount amount to withdraw\n     */\n    function withdraw(\n        bytes32 externalId,\n        bytes memory sender,\n        address outputToken,\n        uint256 amount\n    ) private {\n        gateway.withdraw(\n            sender,\n            amount,\n            outputToken,\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(externalId, outputToken, amount, sender),\n                onRevertGasLimit: gasLimit\n            })\n        );\n    }\n\n    function decodeMessage(bytes calldata message) internal pure returns (DecodedMessage memory) {\n        // dest chainId + targetZRC20 address = 4 + 20 = 24\n        uint32 chainId = BytesHelperLib.bytesToUint32(message, 0); // 4\n        address targetZRC20 = BytesHelperLib.bytesToAddress(message, 4); // 20\n\n        bytes memory swapData = bytes(\"\");\n        bytes memory contractAddress = bytes(\"\");\n        bytes memory crossChainSwapData = bytes(\"\");\n        if(chainId == BITCOIN_EDDY) {\n            // 24 bytes + 42 bytes(btcAddress)\n            // bytes(swapData)\n            require(message.length >= 66, \"Invalid message length for BTC\");\n            swapData = abi.decode(message[66:], (bytes));\n        } else if(chainId == SOLANA_EDDY) {\n            // 24 bytes + 32 bytes(solAddress)\n            // bytes(swapData) + 20 bytes(contractAddress) + bytes(crossChainSwapData)\n            require(message.length >= 56, \"Invalid message length for SOLANA\");\n            (swapData, contractAddress, crossChainSwapData) = abi.decode(\n                message[56:], (bytes, bytes, bytes)); \n        } else {\n            // 24 bytes + 20 bytes(evmAddress)\n            // bytes(swapData) + 20 bytes(contractAddress) + bytes(crossChainSwapData)\n            (swapData, contractAddress, crossChainSwapData) = abi.decode(\n                message[44:], (bytes, bytes, bytes)); \n        }\n\n        // bytes memory contractAddress = bytes(\"\");\n        // bytes memory crossChainSwapData = bytes(\"\");\n        // if(isTargetZRC20 == false) {\n        //     if(chainId == SOLANA_EDDY) {\n        //         // to SOLANA\n        //         // 132 bytes + 32 bytes(contractAddress) + 32 bytes(crossChainSwapData)\n        //         contractAddress = abi.decode(message[132:164], (bytes));\n        //         crossChainSwapData = abi.decode(message[164:], (bytes));\n        //     } else {\n        //         // to EVM\n        //         // 108 bytes + 20 bytes(contractAddress) + 32 bytes(crossChainSwapData)\n        //         contractAddress = abi.decode(message[108:128], (bytes));\n        //         crossChainSwapData = abi.decode(message[128:], (bytes));\n        //     }\n        // }\n\n        return DecodedMessage({\n            targetZRC20: targetZRC20,\n            destChainId: chainId,\n            swapData: swapData,\n            contractAddress: contractAddress,\n            crossChainSwapData: crossChainSwapData\n        });\n    }\n\n    function _handleFeeTransfer(address zrc20, uint256 amount) internal returns (uint256 platformFeesForTx) {\n        platformFeesForTx = (amount * feePercent) / 1000; // platformFee = 5 <> 0.5%\n        TransferHelper.safeTransfer(zrc20, EddyTreasurySafe, platformFeesForTx);\n    }\n\n    function _swapAndSendERC20Tokens(\n        bytes32 externalId,\n        address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee,\n        bytes memory recipient,\n        uint256 targetAmount,\n        bytes memory contractAddress,\n        bytes memory crossChainSwapData\n    ) internal returns(uint256 amountsOut) {\n        // Get amountOut for Input gasToken\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsIn(\n            UniswapFactory,\n            gasFee,\n            getPathForTokens(targetZRC20, gasZRC20) // [targetZRC, gasZRC] or [targetZRC, WZETA, gasZRC]\n        );\n\n        uint amountInMax = (amountsQuote[0]) + (slippage * amountsQuote[0]) / 1000;\n        IZRC20(targetZRC20).approve(UniswapRouter, amountInMax);\n\n        // Swap TargetZRC20 to gasZRC20\n        uint[] memory amounts = IUniswapV2Router01(UniswapRouter)\n            .swapTokensForExactTokens(\n                gasFee, // Amount of gas token required\n                amountInMax,\n                getPathForTokens(targetZRC20, gasZRC20), // path[0] = targetZRC20, path[1] = gasZRC20\n                address(this),\n                block.timestamp + MAX_DEADLINE\n        );\n\n        require(IZRC20(gasZRC20).balanceOf(address(this)) >= gasFee, \"INSUFFICIENT_GAS_FOR_WITHDRAW\");\n        require(targetAmount - amountInMax > 0, \"INSUFFICIENT_AMOUNT_FOR_WITHDRAW\");\n\n        IZRC20(gasZRC20).approve(address(gateway), gasFee);\n        IZRC20(targetZRC20).approve(address(gateway), targetAmount - amounts[0]);\n\n        if(contractAddress.length == 0) {\n            withdraw(\n                externalId,\n                recipient,\n                targetZRC20,\n                targetAmount - amounts[0]\n            );\n        } else {\n            withdrawAndCall(\n                externalId,\n                contractAddress,\n                targetZRC20,\n                targetAmount - amounts[0],\n                address(bytes20(recipient)),\n                crossChainSwapData\n            );\n        }\n        \n        amountsOut = targetAmount - amounts[0];\n    }\n\n    // function _handleBTCToSolanaCase(\n    //     address evmWalletAddress,\n    //     address zrc20,\n    //     address targetZRC20,\n    //     uint256 amount,\n    //     bytes memory swapData,\n    //     bytes calldata message,\n    //     uint256 platformFeesForTx\n    // ) internal {\n    //     address _zrc20 = zrc20;\n    //     bytes memory recipientAddressBech32 = bytesToSolana(message, 24);\n    //     bytes memory contractAddress = abi.decode(message[132:164], (bytes));\n    //     bytes memory crossChainSwapData = abi.decode(message[164:196], (bytes));\n        \n    //     // swap\n    //     IZRC20(_zrc20).approve(DodoRouteProxy, amount);\n    //     (bool success, bytes memory returnData) = DodoRouteProxy.call(swapData); // swap on zetachain\n    //     if (!success) {\n    //         revert RouteProxyCallFailed();\n    //     } \n    //     uint256 outputAmount = abi.decode(returnData, (uint256));\n    //     (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n\n    //     uint256 amountAfterGasFees;\n    //     if(targetZRC20 == gasZRC20) {\n    //         if(gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n    //         IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee);\n    //         amountAfterGasFees = outputAmount - gasFee;\n            \n    //         if(contractAddress.length == 0) {\n    //             withdraw(\n    //                 recipientAddressBech32,\n    //                 _zrc20,\n    //                 targetZRC20,\n    //                 amountAfterGasFees\n    //             );\n    //         } else {\n    //             withdrawAndCall(\n    //                 contractAddress,\n    //                 _zrc20,\n    //                 targetZRC20,\n    //                 amountAfterGasFees,\n    //                 evmWalletAddress,\n    //                 crossChainSwapData\n    //             );\n    //         }\n    //     } else {\n    //         // swap partial output amount to gasZRC20\n    //         amountAfterGasFees = _swapAndSendERC20Tokens(\n    //             targetZRC20,\n    //             gasZRC20,\n    //             gasFee,\n    //             recipientAddressBech32,\n    //             outputAmount,\n    //             _zrc20,\n    //             contractAddress,\n    //             crossChainSwapData\n    //         );\n    //     }\n    //     emit EddyCrossChainSwap(\n    //         zrc20,\n    //         targetZRC20,\n    //         amount,\n    //         amountAfterGasFees,\n    //         evmWalletAddress,\n    //         platformFeesForTx\n    //     );\n    // }\n\n    function _handleBTCCase(\n        bytes32 externalId,\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        bytes memory swapData,\n        bytes memory message,\n        uint256 platformFeesForTx\n    ) internal {\n        bytes memory recipientAddressBech32 = bytesToBTC(message, 24);\n        // swap\n        IZRC20(zrc20).approve(DODOApprove, amount);\n        (bool success, bytes memory returnData) = DODORouteProxy.call(swapData); // swap on zetachain\n        if(!success) {\n            revert RouteProxyCallFailed();\n        } \n        uint256 outputAmount = abi.decode(returnData, (uint256));\n\n        (, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n        if(outputAmount < gasFee) revert NotEnoughToPayGasFee();\n        IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee);\n        withdraw(\n            externalId,\n            recipientAddressBech32,\n            targetZRC20,\n            outputAmount - gasFee\n        );\n\n        address _evmWalletAddress = evmWalletAddress;\n        emit EddyCrossChainSwap(\n            externalId,\n            zrc20,\n            targetZRC20,\n            amount,\n            outputAmount - gasFee,\n            _evmWalletAddress,\n            platformFeesForTx\n        );\n    }\n\n    function _handleSolanaCase(\n        bytes32 externalId,\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        bytes memory swapData,\n        bytes memory contractAddress,\n        bytes memory crossChainSwapData,\n        bytes calldata message,\n        uint256 platformFeesForTx\n    ) internal {\n        bytes memory recipientAddressBech32 = bytesToSolana(message, 24);\n\n        // swap\n        IZRC20(zrc20).approve(DODOApprove, amount);\n        (bool success, bytes memory returnData) = DODORouteProxy.call(swapData); // swap on zetachain\n        if (!success) {\n            revert RouteProxyCallFailed();\n        } \n        uint256 outputAmount = abi.decode(returnData, (uint256));\n        (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n\n        uint256 amountAfterGasFees;\n        if(targetZRC20 == gasZRC20) {\n            if(gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n            IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee);\n            amountAfterGasFees = outputAmount - gasFee;\n\n            if(contractAddress.length == 0) {\n                withdraw(\n                    externalId,\n                    recipientAddressBech32,\n                    targetZRC20,\n                    amountAfterGasFees\n                );\n            } else {\n                withdrawAndCall(\n                    externalId,\n                    contractAddress,\n                    targetZRC20,\n                    amountAfterGasFees,\n                    evmWalletAddress,\n                    crossChainSwapData\n                );\n            }\n        } else {\n            // swap partial output amount to gasZRC20\n            amountAfterGasFees = _swapAndSendERC20Tokens(\n                externalId,\n                targetZRC20,\n                gasZRC20,\n                gasFee,\n                recipientAddressBech32,\n                outputAmount,\n                contractAddress,\n                crossChainSwapData\n            );\n        }\n\n        address _evmWalletAddress = evmWalletAddress;\n        emit EddyCrossChainSwap(\n            externalId,\n            zrc20,\n            targetZRC20,\n            amount,\n            amountAfterGasFees,\n            _evmWalletAddress, // context.sender\n            platformFeesForTx\n        );\n    }\n\n    function onCall(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        bytes calldata message\n    ) external onlyGateway {\n        // Decode the message\n        // 32 bytes(externalId) + bytes message\n        (bytes32 externalId) = abi.decode(message[0:32], (bytes32)); \n        bytes calldata _message = message[32:];\n        DecodedMessage memory decoded = decodeMessage(_message);\n        // Check if the message is from Bitcoin to Solana\n        // bool btcToSolana = (context.chainID == uint256(BITCOIN_EDDY) && decoded.destChainId == SOLANA_EDDY);\n        address evmWalletAddress = getEvmAddress(context, _message, decoded.destChainId);\n\n        // Transfer platform fees\n        uint256 platformFeesForTx = _handleFeeTransfer(zrc20, amount); // platformFee = 5 <> 0.5%\n        amount = amount - platformFeesForTx;\n\n        (address gasZRC20, uint256 gasFee) = (decoded.contractAddress.length == 0)\n            ? IZRC20(decoded.targetZRC20).withdrawGasFee() \n            : IZRC20(decoded.targetZRC20).withdrawGasFeeWithGasLimit(gasLimit);\n\n        // if(btcToSolana) {\n        //     // Bitcoin to Solana\n        //     _handleBTCToSolanaCase(\n        //         evmWalletAddress,\n        //         zrc20,\n        //         decoded.targetZRC20,\n        //         amount,\n        //         decoded.swapData,\n        //         message,\n        //         platformFeesForTx\n        //     );\n        // } else {}\n        \n        if(decoded.destChainId == BITCOIN_EDDY) {\n            // to Bitcoin\n            _handleBTCCase(\n                externalId,\n                evmWalletAddress,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                decoded.swapData,\n                _message,\n                platformFeesForTx\n            );\n        } else if(decoded.destChainId == SOLANA_EDDY) {\n            // to Solana\n            _handleSolanaCase(\n                externalId,\n                evmWalletAddress,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                decoded.swapData,\n                decoded.contractAddress,\n                decoded.crossChainSwapData,\n                _message,\n                platformFeesForTx\n            );\n        } else {\n            // EVM to EVM\n            // swap\n            IZRC20(zrc20).approve(DODOApprove, amount);\n            (bool success, bytes memory returnData) = DODORouteProxy.call(decoded.swapData); // swap on zetachain\n            if (!success) {\n                revert RouteProxyCallFailed();\n            } \n            uint256 outputAmount = abi.decode(returnData, (uint256));\n            if(decoded.targetZRC20 == gasZRC20) {\n                if (gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n                IZRC20(decoded.targetZRC20).approve(address(gateway), outputAmount + gasFee);\n\n                if(decoded.contractAddress.length == 0) {\n                    // withdraw\n                    withdraw(\n                        externalId,\n                        abi.encodePacked(evmWalletAddress),\n                        decoded.targetZRC20,\n                        outputAmount - gasFee\n                    );\n                } else {\n                    // withdraw and call\n                    withdrawAndCall(\n                        externalId,\n                        decoded.contractAddress,\n                        decoded.targetZRC20,\n                        outputAmount - gasFee,\n                        evmWalletAddress,\n                        decoded.crossChainSwapData\n                    );\n                }\n                emit EddyCrossChainSwap(\n                    externalId,\n                    zrc20,\n                    decoded.targetZRC20,\n                    amount,\n                    outputAmount - gasFee,\n                    evmWalletAddress,\n                    platformFeesForTx\n                );\n            } else {\n                uint256 amountsOutTarget = _swapAndSendERC20Tokens(\n                    externalId,\n                    decoded.targetZRC20,\n                    gasZRC20,\n                    gasFee,\n                    abi.encodePacked(evmWalletAddress),\n                    outputAmount,\n                    decoded.contractAddress,\n                    decoded.crossChainSwapData\n                );\n                emit EddyCrossChainSwap(\n                    externalId,\n                    zrc20,\n                    decoded.targetZRC20,\n                    amount,\n                    amountsOutTarget,\n                    evmWalletAddress,\n                    platformFeesForTx\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Function called by the gateway to revert the cross-chain swap\n     * @param context Revert context\n     * @dev Only the gateway can call this function\n     */\n    function onRevert(RevertContext calldata context) external onlyGateway {\n        (bytes32 externalId, address asset, uint256 amount, address sender) \n            = abi.decode(context.revertMessage, (bytes32, address, uint256, address));\n        TransferHelper.safeTransfer(asset, sender, amount);\n        \n        emit EddyCrossChainSwapRevert(\n            externalId,\n            asset,\n            amount,\n            sender\n        );\n    }\n}"
    },
    "contracts/GatewaySend.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {GatewayEVM} from \"@zetachain/protocol-contracts/contracts/evm/GatewayEVM.sol\";\nimport \"@zetachain/protocol-contracts/contracts/evm/interfaces/IGatewayEVM.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IDODORouteProxy} from \"./interfaces/IDODORouteProxy.sol\";\nimport {TransferHelper} from \"./libraries/TransferHelper.sol\";\n\ncontract GatewaySend is Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    uint256 public globalNonce;\n    uint256 public gasLimit;\n    address public DODORouteProxy;\n    address public DODOApprove;\n    GatewayEVM public gateway;\n    \n    event EddyCrossChainSwapRevert(\n        bytes32 externalId,\n        address token,\n        uint256 amount,\n        address walletAddress\n    );\n    event EddyCrossChainSwap(\n        bytes32 externalId,\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        uint256 outputAmount,\n        address walletAddress\n    );\n    event DODORouteProxyUpdated(address dodoRouteProxy);\n    event GatewayUpdated(address gateway);\n\n    error Unauthorized();\n    error RouteProxyCallFailed();\n\n    modifier onlyGateway() {\n        if (msg.sender != address(gateway)) revert Unauthorized();\n        _;\n    }\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initialize the contract\n     * @param _gateway Gateway contract address\n     * @param _dodoRouteProxy Address of the DODORouteProxy\n     */\n    function initialize(\n        address payable _gateway,\n        address _dodoRouteProxy,\n        uint256 _gasLimit\n    ) public initializer {\n        __Ownable_init(msg.sender);\n        __UUPSUpgradeable_init();\n        gateway = GatewayEVM(_gateway);\n        DODORouteProxy = _dodoRouteProxy;\n        DODOApprove = IDODORouteProxy(_dodoRouteProxy)._DODO_APPROVE_PROXY_();\n        gasLimit = _gasLimit;\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        transferOwnership(_owner);\n    }\n\n    function setDODORouteProxy(address _dodoRouteProxy) external onlyOwner {\n        DODORouteProxy = _dodoRouteProxy;\n        emit DODORouteProxyUpdated(_dodoRouteProxy);\n    }\n\n    function setGateway(address _gateway) external onlyOwner {\n        gateway = GatewayEVM(_gateway);\n        emit GatewayUpdated(_gateway);\n    }\n\n    function setGasLimit(uint256 _gasLimit) external onlyOwner {\n        gasLimit = _gasLimit;\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function _calcExternalId(address sender) internal view returns (bytes32 externalId) {\n        externalId = keccak256(abi.encodePacked(address(this), sender, globalNonce, block.timestamp));\n    }\n\n    function depositAndCall(\n        address fromToken,\n        uint256 amount,\n        bytes calldata swapData,\n        address targetContract,\n        address asset,\n        bytes calldata payload\n    ) public {\n        require(IERC20(fromToken).transferFrom(msg.sender, address(this), amount), \"INSUFFICIENT ALLOWANCE: TRANSFER FROM FAILED\");\n        globalNonce++;\n        bytes32 externalId = _calcExternalId(msg.sender);\n        // Swap on DODO Router\n        IERC20(fromToken).approve(DODOApprove, amount);\n        \n        (bool success, bytes memory returnData) = DODORouteProxy.call(swapData);\n        if (!success) {\n            revert RouteProxyCallFailed();\n        }\n        uint256 outputAmount = abi.decode(returnData, (uint256));\n\n        IERC20(asset).approve(address(gateway), outputAmount);\n        gateway.depositAndCall(\n            targetContract,\n            outputAmount,\n            asset,\n            bytes.concat(externalId, payload),\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(externalId, asset, amount, msg.sender),\n                onRevertGasLimit: gasLimit\n            })\n        );\n        emit EddyCrossChainSwap(\n            externalId,\n            fromToken,\n            asset,\n            amount,\n            outputAmount,\n            msg.sender\n        );\n    }\n\n    function depositAndCall(\n        address targetContract,\n        uint256 amount,\n        address asset,\n        bytes calldata payload\n    ) public {\n        globalNonce++;\n        bytes32 externalId = _calcExternalId(msg.sender);\n        IERC20(asset).transferFrom(msg.sender, address(this), amount);\n        IERC20(asset).approve(address(gateway), amount);\n        gateway.depositAndCall(\n            targetContract,\n            amount,\n            asset,\n            bytes.concat(externalId, payload),\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(externalId, asset, amount, msg.sender),\n                onRevertGasLimit: gasLimit\n            })\n        );\n        emit EddyCrossChainSwap(\n            externalId,\n            asset,\n            asset,\n            amount,\n            amount,\n            msg.sender\n        );\n    }\n\n    function onCall(\n        MessageContext calldata /*context*/,\n        bytes calldata message\n    ) external payable onlyGateway returns (bytes4) {\n        (bytes32 externalId, address evmWalletAddress, uint256 amount, bytes memory crossChainSwapData) = abi.decode(\n            message, \n            (bytes32, address, uint256, bytes)\n        );\n        (address fromToken, address toToken, bytes memory swapData) = abi.decode(\n            crossChainSwapData,\n            (address, address, bytes)\n        );\n        IERC20(fromToken).transferFrom(msg.sender, address(this), amount);\n        IERC20(fromToken).approve(DODORouteProxy, amount);\n        (bool success, bytes memory returnData) = DODORouteProxy.call(swapData);\n        if (!success) {\n            revert RouteProxyCallFailed();\n        }\n        uint256 outputAmount = abi.decode(returnData, (uint256));\n        IERC20(toToken).transfer(evmWalletAddress, outputAmount);\n\n        emit EddyCrossChainSwap(\n            externalId,\n            fromToken,\n            toToken,\n            amount,\n            outputAmount,\n            evmWalletAddress\n        );\n\n        return \"\";\n    }\n\n    /**\n     * @notice Function called by the gateway to revert the cross-chain swap\n     * @param context Revert context\n     * @dev Only the gateway can call this function\n     */\n    function onRevert(RevertContext calldata context) external onlyGateway {\n        (bytes32 externalId, address asset, uint256 amount, address sender) \n            = abi.decode(context.revertMessage, (bytes32, address, uint256, address));\n        TransferHelper.safeTransfer(asset, sender, amount);\n        \n        emit EddyCrossChainSwapRevert(\n            externalId,\n            asset,\n            amount,\n            sender\n        );\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}"
    },
    "contracts/GatewayTransferNative.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {GatewayZEVM} from \"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\";\nimport {IZRC20} from \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IZRC20.sol\";\nimport {UniversalContract} from \"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {UniswapV2Library} from \"./libraries/UniswapV2Library.sol\";\nimport {TransferHelper} from \"./libraries/TransferHelper.sol\";\nimport {BytesHelperLib} from \"./libraries/BytesHelperLib.sol\";\nimport {IWETH9} from \"./interfaces/IWETH9.sol\";\nimport {IDODORouteProxy} from \"./interfaces/IDODORouteProxy.sol\";\n\ncontract GatewayTransferNative is UniversalContract, Initializable, OwnableUpgradeable, UUPSUpgradeable {\n    address public constant WZETA = 0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf;\n    address public constant UniswapRouter = 0x2ca7d64A7EFE2D62A725E2B35Cf7230D6677FfEe;\n    address public constant UniswapFactory = 0x9fd96203f7b22bCF72d9DCb40ff98302376cE09c;\n    uint32 constant BITCOIN_EDDY = 8332; // chain Id from eddy db\n    uint32 constant SOLANA_EDDY = 900; // chain Id from eddy db\n    uint256 constant ZETACHAIN = 7000;\n    uint256 constant MAX_DEADLINE = 200;\n    address private EddyTreasurySafe;\n    address public DODORouteProxy;\n    address public DODOApprove;\n    uint256 public globalNonce;\n    uint256 public feePercent;\n    uint256 public slippage;\n    uint256 public gasLimit;\n\n    GatewayZEVM public gateway;\n\n    struct DecodedNativeMessage {\n        address receiver;\n        address targetZRC20;\n        bytes swapData;\n    }\n\n    struct DecodedMessage {\n        address targetZRC20;\n        uint32 destChainId;\n        bytes swapData;\n        bytes contractAddress; // empty for withdraw, non-empty for withdrawAndCall\n        bytes crossChainSwapData;\n    }\n\n    error Unauthorized();\n    error RouteProxyCallFailed();\n    error NotEnoughToPayGasFee();\n    error IdenticalAddresses();\n    error ZeroAddress();\n\n    event EddyCrossChainSwapRevert(\n        bytes32 externalId,\n        address token,\n        uint256 amount,\n        address walletAddress\n    );\n    event EddyCrossChainSwap(\n        bytes32 externalId,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        uint256 outputAmount,\n        address walletAddress,\n        uint256 fees\n    );\n    event GatewayUpdated(address gateway);\n    event FeePercentUpdated(uint256 feePercent);\n    event DODORouteProxyUpdated(address dodoRouteProxy);\n    event EddyTreasurySafeUpdated(address EddyTreasurySafe);\n\n    modifier onlyGateway() {\n        if (msg.sender != address(gateway)) revert Unauthorized();\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initialize the contract\n     * @param _gateway Gateway contract address\n     * @param _EddyTreasurySafe Address of the platform fee wallets\n     * @param _dodoRouteProxy Address of the DODORouteProxy\n     * @param _feePercent Platform fee percentage in basis points (e.g., 10 = 1%)\n     */\n    function initialize(\n        address payable _gateway,\n        address _EddyTreasurySafe,\n        address _dodoRouteProxy,\n        uint256 _feePercent,\n        uint256 _slippage,\n        uint256 _gasLimit\n    ) public initializer {\n        __Ownable_init(msg.sender);\n        __UUPSUpgradeable_init();\n        gateway = GatewayZEVM(_gateway);\n        EddyTreasurySafe = _EddyTreasurySafe;\n        DODORouteProxy = _dodoRouteProxy;\n        DODOApprove = IDODORouteProxy(_dodoRouteProxy)._DODO_APPROVE_PROXY_();\n        feePercent = _feePercent;\n        slippage = _slippage;\n        gasLimit = _gasLimit;\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        transferOwnership(_owner);\n    }\n\n    function setDODORouteProxy(address _dodoRouteProxy) external onlyOwner {\n        DODORouteProxy = _dodoRouteProxy;\n        emit DODORouteProxyUpdated(_dodoRouteProxy);\n    }\n\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\n        feePercent = _feePercent;\n        emit FeePercentUpdated(_feePercent);\n    }\n\n    function setGasLimit(uint256 _gasLimit) external onlyOwner {\n        gasLimit = _gasLimit;\n    }\n\n    function setGateway(address payable _gateway) external onlyOwner {\n        gateway = GatewayZEVM(_gateway);\n        emit GatewayUpdated(_gateway);\n    }\n\n    function setEddyTreasurySafe(address _EddyTreasurySafe) external onlyOwner {\n        EddyTreasurySafe = _EddyTreasurySafe;\n        emit EddyTreasurySafeUpdated(_EddyTreasurySafe);\n    }\n\n    // function setUniswapRouter(address _uniswapRouter) external onlyOwner {\n    //     UniswapRouter = _uniswapRouter;\n    //     UniswapFactory = IUniswapV2Router01(_uniswapRouter).factory();\n    // }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    function _calcExternalId(address sender) internal view returns (bytes32 externalId) {\n        externalId = keccak256(abi.encodePacked(address(this), sender, globalNonce, block.timestamp));\n    }\n\n    // ============== Uniswap Helper ================ \n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) revert IdenticalAddresses();\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (token0 == address(0)) revert ZeroAddress();\n    }\n\n    function uniswapv2PairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) public pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n     function _existsPairPool(\n        address uniswapV2Factory,\n        address zrc20A,\n        address zrc20B\n    ) internal view returns (bool) {\n        address uniswapPool = uniswapv2PairFor(\n            uniswapV2Factory,\n            zrc20A,\n            zrc20B\n        );\n        return\n            IZRC20(zrc20A).balanceOf(uniswapPool) > 0 &&\n            IZRC20(zrc20B).balanceOf(uniswapPool) > 0;\n    }\n\n    function getPathForTokens(\n        address zrc20,\n        address targetZRC20\n    ) internal view returns(address[] memory path) {\n        bool existsPairPool = _existsPairPool(\n            UniswapFactory,\n            zrc20,\n            targetZRC20\n        );\n\n        if (existsPairPool) {\n            path = new address[](2);\n            path[0] = zrc20;\n            path[1] = targetZRC20;\n        } else {\n            path = new address[](3);\n            path[0] = zrc20;\n            path[1] = WZETA;\n            path[2] = targetZRC20;\n        }\n    }\n\n    /**\n     * @notice Function to decode solana wallet address\n     * @param data Data \n     * @param offset Offset\n     */\n    function bytesToSolana(\n        bytes memory data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(32);\n        for (uint i = 0; i < 32; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n        return bech32Bytes;\n    }\n\n    function bytesToBTC(\n        bytes memory data,\n        uint256 offset\n    ) internal pure returns (bytes memory) {\n        bytes memory bech32Bytes = new bytes(42);\n        for (uint i = 0; i < 42; i++) {\n            bech32Bytes[i] = data[i + offset];\n        }\n        return bech32Bytes;\n    }\n    \n    function decodeNativeMessage(\n        bytes calldata message\n    ) internal pure returns (DecodedNativeMessage memory decodedMessage) {\n        // 20 bytes(evmAddress) + 20 bytes(targetZRC20) + bytes(swapData)\n        address receiver = BytesHelperLib.bytesToAddress(message, 0); // 20\n        address targetZRC20 = BytesHelperLib.bytesToAddress(message, 20); // 40\n        bytes memory swapData = abi.decode(message[40:], (bytes)); \n        decodedMessage = DecodedNativeMessage({\n            receiver: receiver,\n            targetZRC20: targetZRC20,\n            swapData: swapData\n        });\n    }\n\n    function decodeMessage(bytes calldata message) internal pure returns (DecodedMessage memory) {\n        // dest chainId + targetZRC20 address = 4 + 20 = 24\n        uint32 chainId = BytesHelperLib.bytesToUint32(message, 0); // 4\n        address targetZRC20 = BytesHelperLib.bytesToAddress(message, 4); // 20\n\n        bytes memory swapData = bytes(\"\");\n        bytes memory contractAddress = bytes(\"\");\n        bytes memory crossChainSwapData = bytes(\"\");\n        if(chainId == BITCOIN_EDDY) {\n            // 24 bytes + 42 bytes(btcAddress)\n            // bytes(swapData)\n            require(message.length >= 66, \"Invalid message length for BTC\");\n            swapData = abi.decode(message[66:], (bytes));\n        } else if(chainId == SOLANA_EDDY) {\n            // 24 bytes + 32 bytes(solAddress)\n            // bytes(swapData) + 20 bytes(contractAddress) + bytes(crossChainSwapData)\n            require(message.length >= 56, \"Invalid message length for SOLANA\");\n            (swapData, contractAddress, crossChainSwapData) = abi.decode(\n                message[56:], (bytes, bytes, bytes)); \n        } else {\n            // 24 bytes + 20 bytes(evmAddress)\n            // bytes(swapData) + 20 bytes(contractAddress) + bytes(crossChainSwapData)\n            (swapData, contractAddress, crossChainSwapData) = abi.decode(\n                message[44:], (bytes, bytes, bytes)); \n        }\n\n        // bytes memory contractAddress = bytes(\"\");\n        // bytes memory crossChainSwapData = bytes(\"\");\n        // if(isTargetZRC20 == false) {\n        //     if(chainId == SOLANA_EDDY) {\n        //         // to SOLANA\n        //         // 132 bytes + 32 bytes(contractAddress) + 32 bytes(crossChainSwapData)\n        //         contractAddress = abi.decode(message[132:164], (bytes));\n        //         crossChainSwapData = abi.decode(message[164:], (bytes));\n        //     } else {\n        //         // to EVM\n        //         // 108 bytes + 20 bytes(contractAddress) + 32 bytes(crossChainSwapData)\n        //         contractAddress = abi.decode(message[108:128], (bytes));\n        //         crossChainSwapData = abi.decode(message[128:], (bytes));\n        //     }\n        // }\n\n        return DecodedMessage({\n            targetZRC20: targetZRC20,\n            destChainId: chainId,\n            swapData: swapData,\n            contractAddress: contractAddress,\n            crossChainSwapData: crossChainSwapData\n        });\n    }\n\n    function getEvmAddress(bytes calldata message, uint32 chainId) internal view returns(address evmWalletAddress) {\n        if (chainId == BITCOIN_EDDY || chainId == SOLANA_EDDY) {\n            evmWalletAddress = msg.sender;\n        } else {\n            evmWalletAddress = BytesHelperLib.bytesToAddress(message, 24);\n        }\n    }\n\n    function withdrawAndCall(\n        bytes32 externalId,\n        bytes memory contractAddress,\n        address targetZRC20,\n        uint256 outputAmount,\n        address evmWalletAddress,\n        bytes memory swapData\n    ) public {\n        bytes memory message = abi.encode(externalId, evmWalletAddress, outputAmount, swapData);\n        gateway.withdrawAndCall(\n            contractAddress,\n            outputAmount,\n            targetZRC20,\n            message,\n            CallOptions({\n                isArbitraryCall: false,\n                gasLimit: gasLimit\n            }),\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(externalId, targetZRC20, outputAmount, evmWalletAddress),\n                onRevertGasLimit: gasLimit\n            })\n        );\n    }\n\n    /**\n     * @notice - Function to withdraw using gateway\n     * @param sender Sender address\n     * @param outputToken output token address\n     * @param amount amount to withdraw\n     */\n    function withdraw(\n        bytes32 externalId,\n        bytes memory sender,\n        address outputToken,\n        uint256 amount\n    ) public {\n        gateway.withdraw(\n            sender,\n            amount,\n            outputToken,\n            RevertOptions({\n                revertAddress: address(this),\n                callOnRevert: true,\n                abortAddress: address(0),\n                revertMessage: abi.encode(externalId, outputToken, amount, sender),\n                onRevertGasLimit: gasLimit\n            })\n        );\n    }\n\n    function _swapAndSendERC20Tokens(\n        bytes32 externalId,\n        address targetZRC20,\n        address gasZRC20,\n        uint256 gasFee,\n        bytes memory recipient,\n        uint256 targetAmount,\n        bytes memory contractAddress,\n        bytes memory crossChainSwapData\n    ) internal returns(uint256 amountsOut) {\n        // Get amountOut for Input gasToken\n        uint[] memory amountsQuote = UniswapV2Library.getAmountsIn(\n            UniswapFactory,\n            gasFee,\n            getPathForTokens(targetZRC20, gasZRC20) // [targetZRC, gasZRC] or [targetZRC, WZETA, gasZRC]\n        );\n\n        uint amountInMax = (amountsQuote[0]) + (slippage * amountsQuote[0]) / 1000;\n        IZRC20(targetZRC20).approve(UniswapRouter, amountInMax);\n\n        // Swap TargetZRC20 to gasZRC20\n        uint[] memory amounts = IUniswapV2Router01(UniswapRouter)\n            .swapTokensForExactTokens(\n                gasFee, // Amount of gas token required\n                amountInMax,\n                getPathForTokens(targetZRC20, gasZRC20), // path[0] = targetZRC20, path[1] = gasZRC20\n                address(this),\n                block.timestamp + MAX_DEADLINE\n        );\n\n        require(IZRC20(gasZRC20).balanceOf(address(this)) >= gasFee, \"INSUFFICIENT_GAS_FOR_WITHDRAW\");\n        require(targetAmount - amountInMax > 0, \"INSUFFICIENT_AMOUNT_FOR_WITHDRAW\");\n\n        IZRC20(gasZRC20).approve(address(gateway), gasFee);\n        IZRC20(targetZRC20).approve(address(gateway), targetAmount - amounts[0]);\n\n        if(contractAddress.length == 0) {\n            withdraw(\n                externalId,\n                recipient,\n                targetZRC20,\n                targetAmount - amounts[0]\n            );\n        } else {\n            withdrawAndCall(\n                externalId,\n                contractAddress,\n                targetZRC20,\n                targetAmount - amounts[0],\n                address(bytes20(recipient)),\n                crossChainSwapData\n            );\n        }\n        \n        amountsOut = targetAmount - amounts[0];\n    }\n\n    function _handleBTCCase(\n        bytes32 externalId,\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        bytes memory swapData,\n        bytes memory message,\n        uint256 platformFeesForTx\n    ) internal {\n        bytes memory recipientAddressBech32 = bytesToBTC(message, 24);\n        // swap\n        uint256 outputAmount;\n        if(swapData.length == 0) {\n            outputAmount = amount;\n        } else {\n            IZRC20(zrc20).approve(DODOApprove, amount);\n            (bool success, bytes memory returnData) = DODORouteProxy.call(swapData); // swap on zetachain\n            if(!success) {\n                revert RouteProxyCallFailed();\n            } \n            outputAmount = abi.decode(returnData, (uint256));\n        }\n        \n        (, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n        if(outputAmount < gasFee) revert NotEnoughToPayGasFee();\n        IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee);\n        withdraw(\n            externalId,\n            recipientAddressBech32,\n            targetZRC20,\n            outputAmount - gasFee\n        );\n\n        address _evmWalletAddress = evmWalletAddress;\n        emit EddyCrossChainSwap(\n            externalId,\n            zrc20,\n            targetZRC20,\n            amount,\n            outputAmount - gasFee,\n            _evmWalletAddress,\n            platformFeesForTx\n        );\n    }\n\n    function _handleSolanaCase(\n        bytes32 externalId,\n        address evmWalletAddress,\n        address zrc20,\n        address targetZRC20,\n        uint256 amount,\n        bytes memory swapData,\n        bytes memory contractAddress,\n        bytes memory crossChainSwapData,\n        bytes calldata message,\n        uint256 platformFeesForTx\n    ) internal {\n        bytes memory recipientAddressBech32 = bytesToSolana(message, 24);\n\n        // swap\n        uint256 outputAmount;\n        if(swapData.length == 0) {\n            outputAmount = amount;\n        } else {\n            IZRC20(zrc20).approve(DODOApprove, amount);\n            (bool success, bytes memory returnData) = DODORouteProxy.call(swapData); // swap on zetachain\n            if(!success) {\n                revert RouteProxyCallFailed();\n            } \n            outputAmount = abi.decode(returnData, (uint256));\n        }\n        (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20).withdrawGasFee();\n\n        uint256 amountAfterGasFees;\n        if(targetZRC20 == gasZRC20) {\n            if(gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n            IZRC20(targetZRC20).approve(address(gateway), outputAmount + gasFee);\n            amountAfterGasFees = outputAmount - gasFee;\n\n            if(contractAddress.length == 0) {\n                withdraw(\n                    externalId,\n                    recipientAddressBech32,\n                    targetZRC20,\n                    amountAfterGasFees\n                );\n            } else {\n                withdrawAndCall(\n                    externalId,\n                    contractAddress,\n                    targetZRC20,\n                    amountAfterGasFees,\n                    evmWalletAddress,\n                    crossChainSwapData\n                );\n            }\n        } else {\n            // swap partial output amount to gasZRC20\n            amountAfterGasFees = _swapAndSendERC20Tokens(\n                externalId,\n                targetZRC20,\n                gasZRC20,\n                gasFee,\n                recipientAddressBech32,\n                outputAmount,\n                contractAddress,\n                crossChainSwapData\n            );\n        }\n\n        address _evmWalletAddress = evmWalletAddress;\n        emit EddyCrossChainSwap(\n            externalId,\n            zrc20,\n            targetZRC20,\n            amount,\n            amountAfterGasFees,\n            _evmWalletAddress, // context.sender\n            platformFeesForTx\n        );\n    }\n\n    function _handleFeeTransfer(\n        address zrc20,\n        uint256 amount\n    ) internal returns (uint256 platformFeesForTx) {\n        platformFeesForTx = (amount * feePercent) / 1000; // platformFee = 5 <> 0.5%\n        TransferHelper.safeTransfer(zrc20, EddyTreasurySafe, platformFeesForTx);\n    }\n\n    /**\n     * @notice Function called by the gateway to execute the cross-chain swap\n     * @param context Message context\n     * @param zrc20 ZRC20 token address\n     * @param amount Amount\n     * @param message Message\n     * @dev Only the gateway can call this function\n     */\n    function onCall(\n        MessageContext calldata context,\n        address zrc20,\n        uint256 amount,\n        bytes calldata message\n    ) external override onlyGateway {\n        // Decode the message\n        // 32 bytes(externalId) + bytes message\n        (bytes32 externalId) = abi.decode(message[0:32], (bytes32)); \n        bytes calldata _message = message[32:];\n        DecodedNativeMessage memory decoded = decodeNativeMessage(_message);\n\n        // Fee for platform\n        uint256 platformFeesForTx = _handleFeeTransfer(zrc20, amount); // platformFee = 5 <> 0.5%\n\n        if (decoded.targetZRC20 == zrc20) {\n            // same token\n            TransferHelper.safeTransfer(\n                decoded.targetZRC20,\n                decoded.receiver,\n                amount - platformFeesForTx\n            );\n\n            emit EddyCrossChainSwap(\n                externalId,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                amount - platformFeesForTx,\n                decoded.receiver,\n                platformFeesForTx\n            );\n        } else {\n            // swap\n            IZRC20(zrc20).approve(DODOApprove, amount);\n            (bool success, bytes memory returnData) = DODORouteProxy.call(\n                decoded.swapData\n            ); // swap on zetachain\n            if (!success) {\n                revert RouteProxyCallFailed();\n            }\n            uint256 outputAmount = abi.decode(returnData, (uint256));\n\n            if (decoded.targetZRC20 == WZETA) {\n                // withdraw WZETA to get Zeta in 1:1 ratio\n                IWETH9(WZETA).withdraw(outputAmount);\n                // transfer wzeta\n                payable(decoded.receiver).transfer(outputAmount);\n            } else {\n                TransferHelper.safeTransfer(\n                    decoded.targetZRC20,\n                    decoded.receiver,\n                    outputAmount\n                );\n            }\n\n            emit EddyCrossChainSwap(\n                externalId,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                outputAmount,\n                decoded.receiver,\n                platformFeesForTx\n            );\n        }\n    }\n\n    function withdrawToNativeChain(\n        address zrc20,\n        uint256 amount,\n        bytes calldata message\n    ) external {\n        require(IZRC20(zrc20).transferFrom(msg.sender, address(this), amount), \"INSUFFICIENT ALLOWANCE: TRANSFER FROM FAILED\");\n\n        globalNonce++;\n        bytes32 externalId = _calcExternalId(msg.sender);\n        DecodedMessage memory decoded = decodeMessage(message);\n        address evmWalletAddress = getEvmAddress(message, decoded.destChainId);\n\n        // Transfer platform fees\n        uint256 platformFeesForTx = _handleFeeTransfer(zrc20, amount); // platformFee = 5 <> 0.5%\n        amount = amount - platformFeesForTx;\n\n        (address gasZRC20, uint256 gasFee) = (decoded.contractAddress.length == 0)\n            ? IZRC20(decoded.targetZRC20).withdrawGasFee() \n            : IZRC20(decoded.targetZRC20).withdrawGasFeeWithGasLimit(gasLimit);\n\n        if(decoded.destChainId == BITCOIN_EDDY) {\n            // Zetachain to Bitcoin\n            _handleBTCCase(\n                externalId,\n                evmWalletAddress,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                decoded.swapData,\n                message,\n                platformFeesForTx\n            );\n        } else if(decoded.destChainId == SOLANA_EDDY) {\n            // Zetachain to Solana\n            _handleSolanaCase(\n                externalId,\n                evmWalletAddress,\n                zrc20,\n                decoded.targetZRC20,\n                amount,\n                decoded.swapData,\n                decoded.contractAddress,\n                decoded.crossChainSwapData,\n                message,\n                platformFeesForTx\n            );\n        } else {\n            // Zetachain to EVM\n            // swap\n            uint256 outputAmount;\n            if(decoded.swapData.length == 0) {\n                outputAmount = amount;\n            } else {\n                IZRC20(zrc20).approve(DODOApprove, amount);\n                (bool success, bytes memory returnData) = DODORouteProxy.call(decoded.swapData); // swap on zetachain\n                if(!success) {\n                    revert RouteProxyCallFailed();\n                } \n                outputAmount = abi.decode(returnData, (uint256));\n            }\n\n            if(decoded.targetZRC20 == gasZRC20) {\n                if (gasFee >= outputAmount) revert NotEnoughToPayGasFee();\n                IZRC20(decoded.targetZRC20).approve(address(gateway), outputAmount + gasFee);\n\n                if(decoded.contractAddress.length == 0) {\n                    // withdraw\n                    withdraw(\n                        externalId,\n                        abi.encodePacked(evmWalletAddress),\n                        decoded.targetZRC20,\n                        outputAmount - gasFee\n                    );\n                } else {\n                    // withdraw and call\n                    withdrawAndCall(\n                        externalId,\n                        decoded.contractAddress,\n                        decoded.targetZRC20,\n                        outputAmount - gasFee,\n                        evmWalletAddress,\n                        decoded.crossChainSwapData\n                    );\n                }\n                emit EddyCrossChainSwap(\n                    externalId,\n                    zrc20,\n                    decoded.targetZRC20,\n                    amount,\n                    outputAmount - gasFee,\n                    evmWalletAddress,\n                    platformFeesForTx\n                );\n            } else {\n                uint256 amountsOutTarget = _swapAndSendERC20Tokens(\n                    externalId,\n                    decoded.targetZRC20,\n                    gasZRC20,\n                    gasFee,\n                    abi.encodePacked(evmWalletAddress),\n                    outputAmount,\n                    decoded.contractAddress,\n                    decoded.crossChainSwapData\n                );\n                emit EddyCrossChainSwap(\n                    externalId,\n                    zrc20,\n                    decoded.targetZRC20,\n                    amount,\n                    amountsOutTarget,\n                    evmWalletAddress,\n                    platformFeesForTx\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Function called by the gateway to revert the cross-chain swap\n     * @param context Revert context\n     * @dev Only the gateway can call this function\n     */\n    function onRevert(RevertContext calldata context) external onlyGateway {\n        (bytes32 externalId, address asset, uint256 amount, address sender) \n            = abi.decode(context.revertMessage, (bytes32, address, uint256, address));\n        TransferHelper.safeTransfer(asset, sender, amount);\n        \n        emit EddyCrossChainSwapRevert(\n            externalId,\n            asset,\n            amount,\n            sender\n        );\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}"
    },
    "contracts/interfaces/IDODORouteProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDODORouteProxy {\n    function _DODO_APPROVE_PROXY_() external view returns (address);\n}"
    },
    "contracts/interfaces/IEddyStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IEddyStableSwap {\n    // Events\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\n    event RemoveLiquidityOne(address indexed provider, uint256 token_amount, uint256 coin_amount);\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\n    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\n    event NewAdmin(address indexed admin);\n    event CommitNewFee(uint256 indexed deadline, uint256 fee, uint256 admin_fee);\n    event NewFee(uint256 fee, uint256 admin_fee);\n    event RampA(uint256 old_A, uint256 new_A, uint256 initial_time, uint256 future_time);\n    event StopRampA(uint256 A, uint256 t);\n\n    // View functions\n    function A() external view returns (uint256);\n    function A_precise() external view returns (uint256);\n    function balances(uint256 i) external view returns (uint256);\n    function get_virtual_price() external view returns (uint256);\n    function calc_token_amount(uint256[] calldata amounts, bool is_deposit) external view returns (uint256);\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\n    function coins(uint256 index) external view returns (address);\n    \n    // External functions\n    function add_liquidity(uint256[] calldata amounts, uint256 min_mint_amount) external payable returns (uint256);\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable returns (uint256);\n    function remove_liquidity(uint256 _amount, uint256[] calldata _min_amounts) external returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWETH9 {\n    function name() external view returns (string memory);\n\n    function approve(address guy, uint256 wad) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external returns (bool);\n\n    function withdraw(uint256 wad) external;\n\n    function decimals() external view returns (uint8);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function symbol() external view returns (string memory);\n\n    function transfer(address dst, uint256 wad) external returns (bool);\n\n    function deposit() external payable;\n\n    function allowance(address, address) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IZRC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IZRC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function decreaseAllowance(address spender, uint256 amount) external returns (bool);\n\n    function increaseAllowance(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function deposit(address to, uint256 amount) external returns (bool);\n\n    function burn(address account, uint256 amount) external returns (bool);\n\n    function withdraw(bytes memory to, uint256 amount) external returns (bool);\n\n    function withdrawGasFee() external view returns (address, uint256);\n\n    function withdrawGasFeeWithGasLimit(uint256 gasLimit) external view returns (address, uint256);\n\n    function PROTOCOL_FEE() external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Deposit(bytes from, address indexed to, uint256 value);\n    event Withdrawal(address indexed from, bytes to, uint256 value, uint256 gasFee, uint256 protocolFlatFee);\n    event UpdatedSystemContract(address systemContract);\n    event UpdatedGasLimit(uint256 gasLimit);\n    event UpdatedProtocolFlatFee(uint256 protocolFlatFee);\n}"
    },
    "contracts/libraries/BytesHelperLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\nlibrary BytesHelperLib {\n    error OffsetOutOfBounds();\n    function bytesToAddress(\n        bytes calldata data,\n        uint256 offset\n    ) internal pure returns (address output) {\n        bytes memory b = data[offset:offset + 20];\n        assembly {\n            output := mload(add(b, 20))\n        }\n    }\n\n    function bytesToUint32(\n        bytes calldata data,\n        uint256 offset\n    ) internal pure returns (uint32 output) {\n        bytes memory b = data[offset:offset + 4];\n        assembly {\n            output := mload(add(b, 4))\n        }\n    }\n\n    function addressToBytes(\n        address someAddress\n    ) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(someAddress)));\n    }\n\n    function bytesToBool(\n        bytes calldata data,\n        uint256 offset\n    ) internal pure returns (bool) {\n        if (offset >= data.length) {\n            revert OffsetOutOfBounds();\n        }\n        return uint8(data[offset]) != 0;\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/libraries/SwapHelperLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"../interfaces/IZRC20.sol\";\n\nlibrary SwapHelperLib {\n    uint16 internal constant MAX_DEADLINE = 200;\n\n    error WrongGasContract();\n\n    error NotEnoughToPayGasFee();\n\n    error CantBeIdenticalAddresses();\n\n    error CantBeZeroAddress();\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) revert CantBeIdenticalAddresses();\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (token0 == address(0)) revert CantBeZeroAddress();\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function uniswapv2PairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) public pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    function _doWithdrawal(\n        address targetZRC20,\n        uint256 amount,\n        bytes32 receipient\n    ) internal {\n        (address gasZRC20, uint256 gasFee) = IZRC20(targetZRC20)\n            .withdrawGasFee();\n\n        if (gasZRC20 != targetZRC20) revert WrongGasContract();\n        if (gasFee >= amount) revert NotEnoughToPayGasFee();\n\n        IZRC20(targetZRC20).approve(targetZRC20, gasFee);\n        IZRC20(targetZRC20).withdraw(\n            abi.encodePacked(receipient),\n            amount - gasFee\n        );\n    }\n\n    function _existsPairPool(\n        address uniswapV2Factory,\n        address zrc20A,\n        address zrc20B\n    ) internal view returns (bool) {\n        address uniswapPool = uniswapv2PairFor(\n            uniswapV2Factory,\n            zrc20A,\n            zrc20B\n        );\n        return\n            IZRC20(zrc20A).balanceOf(uniswapPool) > 0 &&\n            IZRC20(zrc20B).balanceOf(uniswapPool) > 0;\n    }\n\n    function _doSwap(\n        address zetaToken,\n        address uniswapV2Factory,\n        address uniswapV2Router,\n        address zrc20,\n        uint256 amount,\n        address targetZRC20,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        bool existsPairPool = _existsPairPool(\n            uniswapV2Factory,\n            zrc20,\n            targetZRC20\n        );\n\n        address[] memory path;\n        if (existsPairPool) {\n            path = new address[](2);\n            path[0] = zrc20;\n            path[1] = targetZRC20;\n        } else {\n            path = new address[](3);\n            path[0] = zrc20;\n            path[1] = zetaToken;\n            path[2] = targetZRC20;\n        }\n\n        IZRC20(zrc20).approve(address(uniswapV2Router), amount);\n        uint256[] memory amounts = IUniswapV2Router01(uniswapV2Router)\n            .swapExactTokensForTokens(\n                amount,\n                minAmountOut,\n                path,\n                address(this),\n                block.timestamp + MAX_DEADLINE\n            );\n        return amounts[path.length - 1];\n    }\n\n     function _doSwapV3(\n        address uniswapV3SwapRouter,\n        address USDC_ETH,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint24 fee1,\n        uint24 fee2\n    )internal returns(uint256 amountOut){\n        IZRC20(tokenIn).approve(address(uniswapV3SwapRouter), amountIn);\n        ISwapRouter.ExactInputParams memory params;\n        // Path for swapping tokenIn to tokenOut\n        if(tokenIn == USDC_ETH || tokenOut == USDC_ETH){\n        // If tokenIn or tokenOut is USDC_ETH, then swap directly to tokenOut\n            uint24 feeToUse = tokenIn == USDC_ETH ? fee2 : fee1;\n            params =  ISwapRouter.ExactInputParams({\n                path: abi.encodePacked(tokenIn,feeToUse, tokenOut),\n                recipient: address(this),\n                deadline: block.timestamp + MAX_DEADLINE,\n                amountIn: amountIn,\n                amountOutMinimum: amountOutMin\n            });\n        }else{\n             // If tokenIn is not USDC_ETH, then swap to USDC_ETH first and then to tokenOut\n            params =  ISwapRouter.ExactInputParams({\n                path: abi.encodePacked(tokenIn, fee1, USDC_ETH, fee2, tokenOut),\n                recipient: address(this),\n                deadline: block.timestamp + MAX_DEADLINE,\n                amountIn: amountIn,\n                amountOutMinimum: amountOutMin\n            });\n        }\n        amountOut = ISwapRouter(uniswapV3SwapRouter).exactInput(params);\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}"
    },
    "contracts/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) public pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/mocks/DODORouteProxyMock.sol": {
      "content": "/*\n\n    Copyright 2020 DODO ZOO.\n    SPDX-License-Identifier: Apache-2.0\n\n*/\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IDODORouteProxy} from \"../interfaces/IDODORouteProxy.sol\";\n\ncontract DODORouteProxyMock is IDODORouteProxy {\n    address DODOApprove;\n    mapping(address baseToken => mapping(address quoteToken => uint256 price))\n        public prices;\n\n    function setDODOApprove(address dodoApprove) public {\n        DODOApprove = dodoApprove;\n    }\n\n    function _DODO_APPROVE_PROXY_() external view returns (address) {\n        return DODOApprove;\n    }\n\n    function setPrice(\n        address baseToken,\n        address quoteToken,\n        uint256 price\n    ) external {\n        prices[baseToken][quoteToken] = price;\n        prices[quoteToken][baseToken] = 1e36 / price;\n    }\n\n    function externalSwap(\n        address fromToken,\n        address toToken,\n        address, // approveTarget\n        address, // swapTarget\n        uint256 fromTokenAmount,\n        uint256, // minReturnAmount\n        bytes memory, // feeData\n        bytes memory, // callDataConcat\n        uint256 // deadLine\n    ) external payable returns (uint256 receiveAmount) {\n        IERC20(fromToken).transferFrom(\n            msg.sender,\n            address(this),\n            fromTokenAmount\n        );\n        receiveAmount = (fromTokenAmount * prices[fromToken][toToken]) / 1e18;\n        IERC20(toToken).transfer(msg.sender, receiveAmount);\n    }\n\n    function mixSwap(\n        address fromToken,\n        address toToken,\n        uint256 fromTokenAmount,\n        uint256, // minReturnAmount\n        address[] memory, // mixAdapters\n        address[] memory, // mixPairs\n        address[] memory, // assetTo\n        uint256, // directions\n        bytes[] memory, // moreInfos\n        bytes memory, // feeData\n        uint256 // deadLine\n    ) external payable returns (uint256 receiveAmount) {\n        IERC20(fromToken).transferFrom(\n            msg.sender,\n            address(this),\n            fromTokenAmount\n        );\n        receiveAmount = (fromTokenAmount * prices[fromToken][toToken]) / 1e18;\n        IERC20(toToken).transfer(msg.sender, receiveAmount);\n    }\n\n    function dodoMutliSwap(\n        uint256 fromTokenAmount,\n        uint256, // minReturnAmount\n        uint256[] memory, // splitNumber\n        address[] memory midToken,\n        address[] memory, // assetFrom\n        bytes[] memory, // sequence,\n        bytes memory, // feeData\n        uint256 // deadLine\n    ) external payable returns (uint256 receiveAmount) {\n        address fromToken = midToken[0];\n        address toToken = midToken[midToken.length - 1];\n        IERC20(fromToken).transferFrom(\n            msg.sender,\n            address(this),\n            fromTokenAmount\n        );\n        receiveAmount = (fromTokenAmount * prices[fromToken][toToken]) / 1e18;\n        IERC20(toToken).transfer(msg.sender, receiveAmount);\n    }\n\n    function test() public {}\n}"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n    uint8 private _decimals_;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol) {\n        _decimals_ = _decimals;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals_;\n    }\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function test() public {}\n}"
    },
    "contracts/mocks/GatewayEVMMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {GatewayZEVMMock} from \"../mocks/GatewayZEVMMock.sol\";\nimport {Callable, MessageContext} from \"@zetachain/protocol-contracts/contracts/evm/interfaces/IGatewayEVM.sol\";\nimport {CallOptions, RevertOptions} from \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IGatewayZEVM.sol\";\nimport {console} from \"../../lib/forge-std/src/console.sol\";\n\ncontract GatewayEVMMock {\n    uint256 chainId;\n    address DODORouteProxy;\n    mapping(address => address) public toZRC20; // erc20 => zrc20\n    mapping(address => address) public toERC20; // zrc20 => erc20\n    mapping(bytes => address) public convertBTCAddress;\n    mapping(bytes32 => address) public convertSOLAddress;\n    GatewayZEVMMock public gatewayZEVM;\n\n    error TargetContractCallFailed();\n\n    function setGatewayZEVM(address _gatewayEVM) public {\n        gatewayZEVM = GatewayZEVMMock(_gatewayEVM);\n    }\n\n    function setDODORouteProxy(address _dodoRouteProxy) public {\n        DODORouteProxy = _dodoRouteProxy;\n    }\n\n    function setZRC20(address erc20, address zrc20) public {\n        toZRC20[erc20] = zrc20;\n        toERC20[zrc20] = erc20;\n    }\n\n    function setConvertBTCAddress(bytes memory btcAddress, address evmAddress) public {\n        convertBTCAddress[btcAddress] = evmAddress;\n    }\n\n    function setConvertSOLAddress(bytes32 solAddress, address evmAddress) public {\n        convertSOLAddress[solAddress] = evmAddress;\n    }\n\n    function setChainId(uint256 _chainId) public {\n        chainId = _chainId;\n    }\n    \n    function depositAndCall(\n        address receiver,\n        uint256 amount,\n        address asset,\n        bytes calldata payload,\n        RevertOptions calldata /*revertOptions*/\n    ) external {\n        IERC20(asset).transferFrom(msg.sender, address(this), amount);\n        gatewayZEVM.depositAndCall(\n            chainId,\n            toZRC20[asset],\n            amount,\n            receiver,\n            payload\n        );\n    }\n\n    function withdraw(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        RevertOptions calldata /*revertOptions*/\n    ) external payable {\n        address asset = toERC20[zrc20];\n        if(receiver.length == 42) {\n            // BTC case\n            address to = convertBTCAddress[receiver];\n            IERC20(asset).transfer(to, amount);\n        } else if(receiver.length == 32) {\n            // SOL case\n            address to = convertSOLAddress[bytes32(receiver)];\n            IERC20(asset).transfer(to, amount);\n        } else {\n            IERC20(asset).transfer(address(bytes20(receiver)), amount);\n        }    \n    }\n\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        bytes calldata message,\n        CallOptions calldata /*callOptions*/,\n        RevertOptions calldata /*revertOptions*/\n    ) external payable {\n        address asset = toERC20[zrc20];\n        if(receiver.length == 32) {\n            console.log(\"Called Solana Contract\");\n        } else {\n            address targetContract = address(bytes20(receiver));\n            IERC20(asset).approve(targetContract, amount);\n            Callable(targetContract).onCall(\n                MessageContext({\n                    sender: address(this)\n                }),\n                message\n            );\n        }\n\n    }\n}"
    },
    "contracts/mocks/GatewayZEVMMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IZRC20} from \"@zetachain/protocol-contracts/contracts/zevm/interfaces/IZRC20.sol\";\nimport {GatewayEVMMock} from \"../mocks/GatewayEVMMock.sol\";\nimport {MessageContext} from \"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/GatewayZEVM.sol\";\nimport \"@zetachain/protocol-contracts/contracts/zevm/interfaces/UniversalContract.sol\";\n\n\ncontract GatewayZEVMMock {\n    GatewayEVMMock public gatewayEVM;\n\n    function setGatewayEVM(address _gatewayEVM) public {\n        gatewayEVM = GatewayEVMMock(_gatewayEVM);\n    }\n\n    function depositAndCall(\n        uint256 chainId,\n        address zrc20,\n        uint256 amount,\n        address target,\n        bytes calldata message\n    ) external {\n        IZRC20(zrc20).transfer(target, amount);\n        UniversalContract(target).onCall(\n            MessageContext({\n                origin: \"\",\n                sender: address(this),\n                chainID: chainId\n            }), \n            zrc20, \n            amount, \n            message\n        );\n    }\n\n    function withdraw(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        RevertOptions calldata revertOptions\n    ) external {\n        IZRC20(zrc20).transferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        gatewayEVM.withdraw(\n            receiver,\n            amount,\n            zrc20,\n            revertOptions\n        );\n    }\n\n    function withdrawAndCall(\n        bytes memory receiver,\n        uint256 amount,\n        address zrc20,\n        bytes calldata message,\n        CallOptions calldata callOptions,\n        RevertOptions calldata revertOptions\n    ) external {\n        IZRC20(zrc20).transferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        gatewayEVM.withdrawAndCall(\n            receiver,\n            amount,\n            zrc20,\n            message,\n            callOptions,\n            revertOptions\n        );\n    }\n}"
    },
    "contracts/mocks/ZRC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ZRC20Mock is ERC20 {\n    uint8 private _decimals_;\n    address gasZRC20;\n    uint256 gasFee;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) ERC20(_name, _symbol) {\n        _decimals_ = _decimals;\n    }\n\n    function setGasZRC20(address _gasZRC20) public {\n        gasZRC20 = _gasZRC20;\n    }\n\n    function setGasFee(uint256 _gasFee) public {\n        gasFee = _gasFee;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals_;\n    }\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function withdrawGasFee() external view returns (address, uint256) {\n        return (gasZRC20, gasFee);\n    }\n\n    function withdrawGasFeeWithGasLimit(uint256 /*gasLimit*/) external view returns (address, uint256) {\n        return (gasZRC20, gasFee);\n    }\n\n    function test() public {}\n}"
    },
    "lib/forge-std/src/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}